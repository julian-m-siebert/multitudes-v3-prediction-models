---
title: "Multitudes v3 (2024/25) Prediction Models"
date: "Last Updated on `r Sys.Date()`"
execute:
  echo: false
  warning: false
  message: false
author:
  - name: Julian M. Siebert
    # corresponding: true
    # orcid: 0000-0002-0472-4677
    email: julian.siebert@ucsf.edu
    affiliations:
      - name: University of California, San Francisco
        # department: Neurology, Memory and Aging Center
        # address: 485 Lasuen Mall
        # city: San Francisco
        # region: CA
        # postal-code: 94305
        id: ucsf
floatsintext: true
format:
  pdf:
    number-sections: true
    header-includes: |
      \usepackage{pdflscape}
      \usepackage{colortbl}
      \usepackage{xcolor}
      \usepackage{placeins}
      \usepackage{float}
      \newcommand{\blandscape}{\begin{landscape}}
      \newcommand{\elandscape}{\end{landscape}}
    fig-pos: h
  # apaquarto-docx: default
  # apaquarto-pdf:
  #   header-includes: |
  #     \usepackage{pdflscape}
  #     \usepackage{colortbl}
  #     \usepackage{xcolor}
  #     \usepackage{placeins}
  #     \usepackage{float}  # for [H] position control
  #     \newcommand{\blandscape}{\begin{landscape}}
  #     \newcommand{\elandscape}{\end{landscape}}
  #   fig-pos: h
  #   # draftall: true
numbered-lines: true
# citeproc: true
suppress-title-page: false
bibliography: bib.bib
# csl: apa.csl
editor: 
  markdown: 
    wrap: sentence
always_allow_html: true
---


::: callout-warning
## Cautionary Note {.unlisted .unnumbered}
This document is a WORK IN PROGRESS and will be updated as new data (e.g., item recalibrations, additional demographic information) become available.
:::

::: callout-important
## To Do {.unlisted .unnumbered}

- ~~recompute scores for universal screening tasks with updated 2025 item parameters once available~~
- ~~filter out implausible RAN score~~
- ~~add 23/24 data~~
- ~~align grades between years~~
- ~~align tasknames between years~~
- ~~re-run 23/24 models~~
- ~~run 24/25 models~~
- ~~run combined model~~
- run two-year model
- recompute scores for remaining tasks with updated 2025 item parameters once available
- try out different definitions of risk (one/both lgs.)
- try different aggregations of tasks (max, mean, etc.) for skill-specific/language-independent predictors

:::

\newpage
\tableofcontents

```{r setup}
library(mice)
library(OptimalCutpoints)
library(caret)
library(epiR)
library(pROC)
library(PRROC)
library(Boruta)
library(kableExtra)
library(gt)
library(gtsummary)
library(corrr)
library(ggpubr)
library(tidyverse)

# Set global chunk options
knitr::opts_chunk$set(
  echo = FALSE,       # Show the code
  warning = FALSE,    # Suppress warnings
  message = FALSE,    # Suppress messages
  cache = TRUE,       # Store results
  fig.width = 6,      # Default figure width
  fig.height = 8,     # Default figure height
  fig.align = 'center' # Center-align figures
)

set.seed(1)

options(tinytex.verbose = TRUE)

# set themes
theme_gtsummary_compact()
theme_set(theme_classic())
theme_update(
  panel.background = element_rect(fill = 'transparent'),
  plot.background = element_rect(fill = 'transparent', color = NA),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  legend.background = element_rect(fill = 'transparent', color = NA)
)

mid_green <- colorRampPalette(c("white", "darkgreen"))(5)[3]
nchart_colours <- c("100+" = mid_green, "< 100" = "lightyellow")

col.all <- "darkblue"
col.el <- "darkred"
col.eo <- "orange"
palette1 = c(col.all, col.el, col.eo)
# names(palette1) = c("All", "EL", "EO")
palette2 = c(col.all, col.el, col.eo)
names(palette2) = c("All", "EL", "EO")

palette.grades = c("red", "green", "blue")
names(palette.grades) = c("K", "G1", "G2")

col.risk <- "red3"
col.norisk <- "green4"
palette3 <- c(col.risk, col.norisk)
terms.risk <- c("Struggling", "Not struggling")
names(palette3) = terms.risk

scale3 <- c("solid", "dashed", "dotted", "dotdash")

source("functions.R")
```

```{r names}
names <- list("nwr_e" = "Nonword Repetition (E)",
              "eli_e" = "Elision - Expressive (E)",
              "elis_e" = "Elision - Receptive (E)",
              "elie_e" = "Elision - Expressive (E)",
              "elir_e" = "Elision - Receptive (E)",
              "srt_e" = "Sentence Repetition (E)",
              "evo_e" = "Expressive Vocabulary (E)",
              "wre_e" = "Word Reading (E)",
              "nre_e" = "Nonword Reading (E)",
              "spe_e" = "Spelling (E)",
              "nsp_e" = "Narrative Story Production (E)",
              "lsf_e" = "Letter-sound Fluency (E)",
              "lnf_e" = "Letter Naming Fluency (E)",
              "lco_e" = "Listening Comprehension (E)",
              "orf_e" = "Oral Reading Fluency (E)",
              "ranl_e" = "Rapid Letter Naming (E)",
              "rano_e" = "Rapid Object Naming (E)",
              "dgs_e" = "Digit Span (E)",
              "rvpl_e" = "Rapid Visual Processing - Letters (E)",
              "rvps_e" = "Rapid Visual Processing - Symbols (E)",
              "mot_e" = "Global Motion Processing (E)",
              "sgm_e" = "Segmentation - Words (E)",
              "sgms_e" = "Segmentation - Syllables (E)",
              "smt_e" = "Semantic Mapping (E)",
              "srt_e" = "Sentence Repetition (E)",
              "dgs_e" = "Digit Span (E)",
              
              "ctopp_elision_scale" = "CTOPP-2: Elision",
              "celf_sentence_comp_scale" = "CELF-5: Sentence Comprehension",
              "celf4_Spanish-to-Spanish_sentence_comp_scale" = "CELF-4: Sentence Comprehension (Spanish)",
              "wcj_c_basicreadingskills" = "WJ Basic Reading Skills",
              "wcm_c_basicreadingskills" = "WM Basic Reading Skills",
              "wcj_c_broadreading" = "WJ Broad Reading",
              "wcm_c_broadreading" = "WM Broad Reading",
              "wcj_c_reading" = "WJ Reading",
              "wcj_c_readingfluency" = "WJ Reading Fluency",
              "wcm_c_reading" = "WM Reading",
              "wcm_c_readingfluency" = "WM Reading Fluency",
              "wcj_pc_ss" = "WJ Passage Comprehension",
              "wcm_pc_ss" = "WM Passage Comprehension",
              "wcj_srf_ss" = "WJ Sentence Reading Fluency",
              "wcm_srf_ss" = "WM Sentence Reading Fluency",
              "wcj_lwi_ss" = "WJ Letter-word Identification",
              "wcm_lwi_ss" = "WM Letter-word Identification",
              "wcj_wa_ss" = "WJ Word Attack",
              "wcm_wa_ss" = "WM Word Attack",
              "wcj_nwr_ss" = "WJ Nonword Repetition",
              "wcm_nwr_ss" = "WM Nonword Repetition",
              "wcj_srt_ss" = "WJ Sentence Repetition",
              "wcm_srt_ss" = "WM Sentence Repetition",
              "wcj_orf_ss" = "WJ Oral Reading Fluency",
              "wcm_orf_ss" = "WM Oral Reading Fluency",
              "wcj_spelling_ss" = "WJ Spelling",
              "wcm_spelling_ss" = "WM Spelling",
              "eowpvt_english_ss" = "Expressive One-Word Picture Vocabulary (English), 4th Ed.",
              "eowpvt_spanish_ss" = "Expressive One-Word Picture Vocabulary (Spanish), 4th Ed.",
              "tpas_elision_scale" = "Test of Phonological Awareness in Spanish: Deletion",
              "celf4_Spanish-to-Spanish_recalling_sentence_scale" = "CELF-4: Recordando Oraciones",
              "eowpvt_spanish_ss" = "Expressive One-Word Picture Vocabulary 4th Ed.",
              "acadience_ranl_timer" = "Acadience RANL - Time (E)",
              "acadience_rano_timer" = "Acadience RANO - Time (E)",
              "acadience_Spanish-to-Spanish_ranl_timer" = "Acadience RANL - Time (S)",
              "acadience_Spanish-to-Spanish_rano_timer" = "Acadience RANO - Time (S)",
              "dibels_lnf_weight" = "DIBELS Letter Naming Fluency (Weight)",
              "idel_lnf" = "IDEL Letter Naming Fluency",
              
              "nwr_s" = "Nonword Repetition (S)",
              "eli_s" = "Elision - Expressive (S)",
              "elis_s" = "Elision - Receptive (S)",
              "elie_s" = "Elision - Expressive (S)",
              "elir_s" = "Elision - Receptive (S)",
              "srt_s" = "Sentence Repetition (S)",
              "evo_s" = "Expressive Vocabulary (S)",
              "wre_s" = "Word Reading (S)",
              "nre_s" = "Nonword Reading (S)",
              "spe_s" = "Spelling (S)",
              "nsp_s" = "Narrative Story Production (S)",
              "lsf_s" = "Letter-sound Fluency (S)",
              "lnf_s" = "Letter Naming Fluency (S)",
              "lco_s" = "Listening Comprehension (S)",
              "orf_s" = "Oral Reading Fluency (S)",
              "ranl_s" = "Rapid Letter Naming (S)",
              "rano_s" = "Rapid Object Naming (S)",
              "dgs_s" = "Digit Span (S)",
              "rvpl_s" = "Rapid Visual Processing - Letters (S)",
              "rvps_s" = "Rapid Visual Processing - Symbols (S)",
              "mot_s" = "Global Motion Processing (S)",
              "sgm_s" = "Segmentation - Words (S)",
              "sgms_s" = "Segmentation - Syllables (S)",
              "smt_s" = "Semantic Mapping (S)",
              "srt_s" = "Sentence Repetition (S)",
              "dgs_s" = "Digit Span (S)",
              
              "shadowMax" = "Max. Shadow Feature",
              "shadowMin" = "Min. Shadow Feature",
              "shadowMean" = "Mean Shadow Feature"
              )
```

```{r load-data}
df <- read_csv("data/df-mv3-prediction-models_2025-07-17.csv") %>% 
  mutate(grade = case_when(grade == "Kindergarten" ~ "K",
                           grade == "Grade 1" ~ "G1",
                           grade == "Grade 2" ~ "G2"
                           ),
         grade = factor(grade, levels = c("K", "G1", "G2")),
         risk_en = case_when(risk_en == 1 ~ "Struggling",
                             risk_en == 0 ~ "Not struggling",
                             ),
         risk_es = case_when(risk_es == 1 ~ "Struggling",
                             risk_es == 0 ~ "Not struggling",
                             ),
         risk_ext_en = case_when(outcomescore_en <= 87 ~ "Struggling",
                                 outcomescore_en > 87 ~ "Not struggling"),
         risk_ext_es = case_when(outcomescore_es <= 87 ~ "Struggling",
                                 outcomescore_es > 87 ~ "Not struggling"),
         task = case_when(task == "eli" ~ "elie",
                          task == "elis" ~ "elir",
                          TRUE ~ task
                          ),
         task = case_when(lang == "en-US" ~ paste0(tolower(task), "_e"),
                          lang == "es-US" ~ paste0(tolower(task), "_s"),
                          )
         ) %>% 
  filter(!grepl("dgs",task)) %>% 
  group_by(task, grade, lang) %>%
  mutate(n  = n()) %>% 
  ungroup() %>% 
  filter(n >= 50) %>% 
  select(-n) %>% 
  group_by(student_id, event, task, lang) %>% 
  slice(1) %>% 
  ungroup() %>% 
  # filter out improbable RAN scores
  mutate(score = case_when(grepl("ran", task) & score >= 3 ~ NA,
                           TRUE ~ score),
         ) %>% 
  filter(!is.na(score))
```

\newpage
\FloatBarrier
# PART I - Re-analysis of 2023/24 Data

## Sample

Throughout, I only included tasks taken by at least 50 students per language per grade, so as to not distort the task selection analyses.

```{r ay2324}
df.2324 <- df %>% 
  filter(ay == "AY 23/24")
N <- length(unique(df.2324$student_id))
n.school <- length(unique(df.2324$school))
n.district <- length(unique(df.2324$district))
```

- *N* = `r N`
- `r n.school` schools
- `r n.district` districts

\blandscape
```{r}
#| label: tbl-ay2324-sample
#| tbl-cap: "Demographic Characteristics of the AY 23/24 Sample (N = 2,701) by Grade and Screening Language \\newline"
df.2324 %>% 
  select(c(student_id, grade, lang, gender, race, ethnicity, el, ever_disability, home_lang)) %>%
  unique() %>% 
  mutate(lang = case_when(lang == "en-US" ~ "English",
                          lang == "es-US" ~ "Spanish",
  )) %>% 
  select(-student_id) %>% 
  tbl_strata(strata = lang,
             .tbl_fun =
               ~ .x |>
               tbl_summary(by = grade,
                           label = c(gender ~ "Gender",
                                     race ~ "Race",
                                     ethnicity ~ "Ethnicity",
                                     el ~ "ELPD",
                                     ever_disability  ~ "Ever IEP/504",
                                     home_lang ~ "Home Language"
                           )
               ) %>% 
               modify_footnote(everything() ~ NA)
  )
```
\elandscape
\FloatBarrier

```{r dfs-ay2324}
df.2324.en <- df.2324 %>% 
  filter(lang == "en-US",
         !is.na(outcomescore_en)
  ) %>% 
  mutate(model_lang = "English",
         task_lang = "English"
  ) %>% 
  rename(risk = risk_en,
         risk_ext = risk_ext_en,
         outcomescore = outcomescore_en,
         outcomepercentile = outcomepercentile_en
  ) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0
                          )
         ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  filter(!is.na(risk))

df.2324.es <- df.2324 %>% 
  filter(lang == "es-US",
         !is.na(outcomescore_es)
  ) %>% 
  mutate(model_lang = "Spanish",
         task_lang = "Spanish") %>% 
  rename(risk = risk_es,
         risk_ext = risk_ext_es,
         outcomescore = outcomescore_es,
         outcomepercentile = outcomepercentile_es
  ) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0
                          )
         ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  filter(!is.na(risk))
```

## Descriptives

### Distributions of English Multitudes Tasks

```{r}
#| label: fig-distributions-en-ay2324
#| fig-cap: "Distributions of English Multitudes Tasks by Grade (Fall 2023)"
#| fig-height: 5
plots <- list()
df.2324.en$grade <- factor(df.2324.en$grade, levels = c("K", "G1", "G2"))

for (t in unique(df.2324.en$task)) {
  plot <- df.2324.en %>% 
    filter(task == t) %>% 
    ggplot(aes(x = score, group = grade, fill = factor(grade, levels = c("K", "G1", "G2")))) +
    geom_density(alpha = .5) +
    theme(legend.position = "bottom") +
    scale_fill_manual(values = palette.grades, drop = FALSE) +
    labs(x = "Score",
         y = " ",
         title = paste(t),
         fill = "Grade") +
    theme(axis.text.y= element_blank(),
          axis.title.x = element_blank())
  plots[[t]] <- plot
}

ggarrange(plotlist = plots,
          common.legend = TRUE,
          legend = "bottom"
)
```

\newpage
### Distributions of Spanish Multitudes Tasks
\FloatBarrier

```{r}
#| label: fig-distributions-es-ay2324
#| fig-cap: "Distributions of Spanish Multitudes Tasks by Grade (Fall 2023)"
#| fig-height: 5

plots <- list()
for (t in unique(df.2324.es$task)) {
  plot <- df.2324.es %>% 
    mutate(grade = factor(grade, levels = c("K", "G1", "G2"))) %>% 
    filter(task == t) %>% 
    ggplot(aes(x = score, group = grade, fill = factor(grade, levels = c("K", "G1", "G2")))) +
    geom_density(alpha = .5) +
    theme(legend.position = "bottom") +
    scale_fill_manual(values = palette.grades, drop = FALSE) +
    labs(x = "Score",
         y = " ",
         title = paste(t),
         fill = "Grade") +
    theme(axis.text.y= element_blank(),
          axis.title.x = element_blank())
  plots[[t]] <- plot
}

ggarrange(plotlist = plots,
          common.legend = TRUE,
          legend = "bottom"
)
```

\newpage
### Distributions of Outcome Measures

```{r df-outcomes-ay2324}
df.2324.outcomes <- df.2324 |> 
  filter(!is.na(outcomescore_en)) %>% 
  mutate(risk = risk_en,
         risk_ext = risk_ext_en,
         outcomescore = outcomescore_en,
         model_lang = "English") %>% 
  rbind(
    df.2324 |> 
      filter(!is.na(outcomescore_es)) %>% 
      mutate(risk = risk_es,
             risk_ext = risk_ext_es,
             outcomescore = outcomescore_es,
             model_lang = "Spanish")
  )
```

```{r fig.height=2.5}
#| label: fig-outcomes-en-ay2324
#| fig-cap: "Distribution of Woodcock-Johnson/-Muñoz Basic Reading Skills Cluster (for Kindergarten) Broad Reading Cluster (for Grades 1 and 2) by Grade and Language with Struggling Readers (</= 20th Percentile) Highlighted  (Spring 2024)."

df.2324.outcomes %>% 
  ggplot(aes(x = outcomescore)) +
  geom_vline(xintercept = 70, colour = "gray", linetype = 2) +
  geom_vline(xintercept = 85, colour = "gray", linetype = 2) +
  geom_vline(xintercept = 100, colour = "darkgray", linetype = 1) +
  geom_vline(xintercept = 115, colour = "gray", linetype = 2) +
  geom_vline(xintercept = 130, colour = "gray", linetype = 2) +
  geom_histogram(#fill = "darkgreen",
    aes(group = risk, fill = risk),
    binwidth = 1
  ) +
  facet_grid(cols = vars(grade),
             rows = vars(model_lang),
             scales = "free"
  ) +
  scale_x_continuous(breaks = c(70, 85, 100, 115, 130), labels = c("70\n(-2SD)", "85\n", "100\n(M)", "115", "130\n(+2SD)")) +
  labs(x = "Standard Score",
       y = "No. of Students",
       fill = "Defined as") +
  theme(legend.position = "bottom") +
  scale_fill_manual(values = palette3)
```

```{r}
#| label: tbl-outcomes-en-ay2324
#| tbl-cap: "Comparison of Proportions of Struggling Readers (</= 20th Percentile) in the Study Sample Based on Overall Multitudes Sample and on Published Woodcock-Johnson/Muñoz Norms (Spring 2024)."

df.2324.outcomes |> 
  select(c(student_id, model_lang,grade, risk_ext, risk)) |>
  unique() |> 
  select(-student_id) |> 
  tbl_strata(strata = model_lang,
             .tbl_fun =
               ~ .x %>% tbl_summary(by = c(grade),
                                    label = c(risk ~ "Sample-based",
                                              risk_ext ~ "Norm-based"
                                    )
               )
  ) |> 
  modify_footnote(everything() ~ NA) |> 
  modify_header(label ~ "**Reference**") |>
  as_kable_extra(booktabs = TRUE,
                 linesep = c("", "", "\\addlinespace")
  ) |> 
  kable_styling(latex_options = c("scale_down"))
```

\FloatBarrier
\newpage

### Correlations

```{r correlation-dfs-ay2324}

df.corr <- df %>% 
  filter(ay == "AY 23/24"
         # !is.na(outcomescore_en)
  ) %>%
  select(c(student_id, grade, task, el, score)) %>% 
  rbind(
    df %>% 
      filter(ay == "AY 23/24",
             !is.na(outcomescore_en)
      ) %>%
      mutate(task = case_when(grade == "K" & !is.na(outcomescore_en) ~ "wcj_c_basicreadingskills",
                              grade == "G1" & !is.na(outcomescore_en) ~ "wcj_c_broadreading",
                              grade == "G2" & !is.na(outcomescore_en) ~ "wcj_c_broadreading",
      ),
      score = outcomescore_en
      ) %>% 
      select(c(student_id, grade, task, el, score)) %>% 
      unique()
  ) %>% 
  rbind(
    df %>% 
      filter(ay == "AY 23/24",
             !is.na(outcomescore_es)
      ) %>%
      mutate(task = case_when(grade == "K" & !is.na(outcomescore_es) ~ "wcm_c_basicreadingskills",
                              grade == "G1" & !is.na(outcomescore_es) ~ "wcm_c_broadreading",
                              grade == "G2" & !is.na(outcomescore_es) ~ "wcm_c_broadreading",
      ),
      score = outcomescore_es
      ) %>% 
      select(c(student_id, grade, task, el, score)) %>% 
      unique()
  )
```

\FloatBarrier
#### Kindergarten - English
\FloatBarrier
```{r}
#| label: fig-corrs-k-en-ay2324
#| fig-cap: "Correlations Between English Multitudes Tasks and English Reading Outcome Scores (Kindergarten; AY 2023/24)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcj", task) | grepl("_e", task)), "K")
```

\FloatBarrier
\newpage
#### Kindergarten - Spanish
\FloatBarrier
```{r}
#| label: fig-corrs-k-es-ay2324
#| fig-cap: "Correlations Between Spanish Multitudes Tasks and Spanish Reading Outcome Scores (Kindergarten; AY 2023/24)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcm", task) | grepl("_s", task)), "K")
```

\FloatBarrier
\newpage
#### Grade 1 - English
\FloatBarrier
```{r}
#| label: fig-corrs-1-en-ay2324
#| fig-cap: "Correlations Between English Multitudes Tasks and English Reading Outcome Scores (Grade 1; AY 2023/24)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcj", task) | grepl("_e", task)), "G1")
```

\FloatBarrier
\newpage
#### Grade 1 - Spanish
\FloatBarrier
```{r}
#| label: fig-corrs-1-es-ay2324
#| fig-cap: "Correlations Between Spanish Multitudes Tasks and Spanish Reading Outcome Scores (Grade 1; AY 2023/24)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcm", task) | grepl("_s", task)), "G1")
```


\FloatBarrier
\newpage
#### Grade 2 - English
\FloatBarrier
```{r}
#| label: fig-corrs-2-en-ay2324
#| fig-cap: "Correlations Between English Multitudes Tasks and English Reading Outcome Scores (Grade 2; AY 2023/24)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcj", task) | grepl("_e", task)), "G2")
```

\FloatBarrier
\newpage
#### Grade 2 - Spanish
\FloatBarrier
```{r}
#| label: fig-corrs-2-es-ay2324
#| fig-cap: "Correlations Between Spanish Multitudes Tasks and Spanish Reading Outcome Scores (Grade 2; AY 2023/24)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcm", task) | grepl("_s", task)), "G2")
```

\FloatBarrier
\newpage
## Task Selection

```{r task-selection-dfs-ay2324}
df.temp.en <- df %>% 
  filter(ay == "AY 23/24",
         lang == "en-US",
         !is.na(outcomescore_en)
  ) %>% 
  mutate(model_lang = "English",
         task_lang = "English"
  ) %>% 
  rename(risk = risk_en,
         risk_ext = risk_ext_en,
         outcomescore = outcomescore_en,
         outcomepercentile = outcomepercentile_en
  ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0,
  )
  )

df.temp.es <- df %>% 
  filter(ay == "AY 23/24",
         lang == "es-US",
         !is.na(outcomescore_es)
  ) %>% 
  mutate(model_lang = "Spanish",
         task_lang = "Spanish"
  ) %>% 
  rename(risk = risk_es,
         risk_ext = risk_ext_es,
         outcomescore = outcomescore_es,
         outcomepercentile = outcomepercentile_es
  ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0,
  )
  )

df.temp.en.cl <- df %>% 
  filter(ay == "AY 23/24",
         # lang == "en-US",
         !is.na(outcomescore_en),
         !is.na(outcomescore_es),
  ) %>% 
  rename(risk = risk_en,
         risk_ext = risk_ext_en,
         outcomescore = outcomescore_en,
         outcomepercentile = outcomepercentile_en
  ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0,
  )
  )

df.temp.es.cl <- df %>% 
  filter(ay == "AY 23/24",
         # lang == "es-US",
         !is.na(outcomescore_en),
         !is.na(outcomescore_es),
  ) %>% 
  rename(risk = risk_es,
         risk_ext = risk_ext_es,
         outcomescore = outcomescore_es,
         outcomepercentile = outcomepercentile_es
  ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0,
  )
  )
```

```{r boruta-k-en-ay2324, cache=TRUE}
boruta.k.en.all <- boruta_task_selection(df.temp.en, "K", "English")
boruta.k.en.el <- boruta_task_selection(df.temp.en |> filter(el == "EL"), "K", "English")
boruta.k.en.eo <- boruta_task_selection(df.temp.en |> filter(el == "EO"), "K", "English")

agg.results.all <- boruta.k.en.all$aggregated_results |> 
  mutate(group = "All") |> 
  rbind(boruta.k.en.el$aggregated_results |> mutate(group = "EL")) |> 
rbind(boruta.k.en.eo$aggregated_results |> mutate(group = "EO"))

plot.boruta.k.en <- plot_boruta(agg.results.all)
```

```{r boruta-k-es-ay2324, cache=TRUE}
boruta.k.es.all <- boruta_task_selection(df.temp.es, "K", "Spanish")

agg.results.all <- boruta.k.es.all$aggregated_results |> 
  mutate(group = "All")

plot.boruta.k.es <- plot_boruta(agg.results.all)
```

```{r boruta-1-en-ay2324, cache=TRUE}
boruta.1.en.all <- boruta_task_selection(df.temp.en, "G1", "English")
boruta.1.en.el <- boruta_task_selection(df.temp.en |> filter(el == "EL"), "G1", "English")
boruta.1.en.eo <- boruta_task_selection(df.temp.en |> filter(el == "EO"), "G1", "English")

agg.results.all <- boruta.1.en.all$aggregated_results |> 
  mutate(group = "All") |> 
  rbind(boruta.1.en.el$aggregated_results |> mutate(group = "EL")) |> 
  rbind(boruta.1.en.eo$aggregated_results |> mutate(group = "EO"))

plot.boruta.1.en <- plot_boruta(agg.results.all)
```

```{r boruta-1-es-ay2324, cache=TRUE}
boruta.1.es.all <- boruta_task_selection(df.temp.es, "G1", "Spanish")

agg.results.all <- boruta.1.es.all$aggregated_results |> 
  mutate(group = "All")

plot.boruta.1.es <- plot_boruta(agg.results.all)
```

```{r boruta-2-en-ay2324, cache=TRUE}
boruta.2.en.all <- boruta_task_selection(df.temp.en, "G2", "English")
boruta.2.en.el <- boruta_task_selection(df.temp.en |> filter(el == "EL"), "G2", "English")
boruta.2.en.eo <- boruta_task_selection(df.temp.en |> filter(el == "EO"), "G2", "English")

agg.results.all <- boruta.2.en.all$aggregated_results |> 
  mutate(group = "All") |> 
  rbind(boruta.2.en.el$aggregated_results |> mutate(group = "EL")) |>
  rbind(boruta.2.en.eo$aggregated_results |> mutate(group = "EO"))

plot.boruta.2.en <- plot_boruta(agg.results.all)
```

```{r boruta-2-es-ay2324, cache=TRUE}
boruta.2.es.all <- boruta_task_selection(df.temp.es, "G2", "Spanish")
# boruta.2.es.el <- boruta_task_selection(df |> filter(el == "EL"), "Grade 2", "Spanish")
# boruta.2.es.eo <- boruta_task_selection(df |> filter(el == "EO"), "Grade 2", "Spanish")

agg.results.all <- boruta.2.es.all$aggregated_results |> 
  mutate(group = "All")

plot.boruta.2.es <- plot_boruta(agg.results.all)
```

\FloatBarrier
### English-to-English (English to English)

```{r}
#| label: fig-boruta-en-ay2324
#| fig-cap: "Mean Task Importance Obtained From Boruta Algorithm for English Predictions, with Results Disaggregated by English Proficiency Designation (AY 2023/24)."
#| fig-height: 7
#| fig-width: 8
ggarrange(plotlist = list(plot.boruta.k.en, plot.boruta.1.en, plot.boruta.2.en),
          common.legend = TRUE,
          legend = "bottom",
          nrow = 3, ncol = 1,
          labels = c("K", "G1", "G2")
          # labels = "AUTO"
)
```

\newpage
\FloatBarrier
### Spanish-to-Spanish (Spanish to Spanish)

```{r}
#| label: fig-boruta-es-ay2324
#| fig-cap: "Mean Task Importance Obtained From Boruta Algorithm for Spanish Predictions (AY 2023/24)."
#| fig-height: 7
#| fig-width: 8
#| 
ggarrange(plotlist = list(plot.boruta.k.es, plot.boruta.1.es, plot.boruta.2.es),
          common.legend = TRUE,
          legend = "bottom",
          nrow = 3, ncol = 1,
          labels = c("K", "G1", "G2"
          )
          # labels = "AUTO"
)
```

\FloatBarrier
\newpage

## Models Evaluations - ROC Curves

### English-to-English - Kindergarten
\FloatBarrier

```{r K-en-ay2324}
df.temp <- df.2324.en |> 
  filter(grade == "K")
N <- length(unique(df.temp$student_id))
n.school <- length(unique(df.temp$school))
n.district <- length(unique(df.temp$district))
```


```{r model-k-en-lnf-ay2324}
modelname <- "0. LNF only"
results.k.en.lnf = build_prediction_model(df.2324.en,
                                          grd = "K",
                                          lg = "English",
                                          mdl = "lnf_e"
)

df.results.k.en.lnf <- results.k.en.lnf[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.en.lnf <- results.k.en.lnf[[2]]

# create and save plots
plots.k.en.lnf <- plot_roc_curves_within_model(df.results.k.en.lnf, disaggregated = FALSE)
```

```{r model-k-en-existing-ay2324}

modelname <- "1. LNF, EVO, RANO, ELIR"
results.k.en.existing = build_prediction_model(df.2324.en,
                                               grd = "K",
                                               lg = "English",
                                               mdl = "lnf_e + evo_e + rano_e + elir_e"
)

df.results.k.en.existing <- results.k.en.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.en.existing <- results.k.en.existing[[2]]

# create and save plots
plots.k.en.existing <- plot_roc_curves_within_model(df.results.k.en.existing, disaggregated = FALSE)
```

```{r model-k-en-model2-ay2324}

modelname <- "2. LNF, EVO, RANO"
results.k.en.model2 = build_prediction_model(df.2324.en,
                                             grd = "K",
                                             lg = "English",
                                             mdl = "lnf_e + evo_e + rano_e"
)

df.results.k.en.model2 <- results.k.en.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.en.model2 <- results.k.en.model2[[2]]

# create and save plots
plots.k.en.model2 <- plot_roc_curves_within_model(df.results.k.en.model2, disaggregated = FALSE)
```

```{r model-k-en-model3-ay2324}

modelname <- "3. LNF, RANO, ELIR"
results.k.en.model3 = build_prediction_model(df.2324.en,
                                             grd = "K",
                                             lg = "English",
                                             mdl = "lnf_e + elir_e + rano_e"
)

df.results.k.en.model3 <- results.k.en.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.en.model3 <- results.k.en.model3[[2]]

# create and save plots
plots.k.en.model3 <- plot_roc_curves_within_model(df.results.k.en.model3, disaggregated = FALSE)
```

```{r model-k-en-srt-ay2324}

modelname <- "3. SRT only"
results.k.en.srt = build_prediction_model(df.2324.en,
                                          grd = "K",
                                          lg = "English",
                                          mdl = "srt_e"
)

df.results.k.en.srt <- results.k.en.srt[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.en.srt <- results.k.en.srt[[2]]

# create and save plots
plots.k.en.srt <- plot_roc_curves_within_model(df.results.k.en.srt, disaggregated = FALSE)
```

```{r model-k-en-new-ay2324}

modelname <- "4. SRT, LNF, EVO, RANL"
results.k.en.new = build_prediction_model(df.2324.en,
                                          grd = "K",
                                          lg = "English",
                                          mdl = "srt_e + lnf_e + evo_e + ranl_e"
)

df.results.k.en.new <- results.k.en.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.en.new <- results.k.en.new[[2]]

# create and save plots
plots.k.en.new <- plot_roc_curves_within_model(df.results.k.en.new, disaggregated = FALSE)
```

```{r}
#| label: fig-roc-k-en-ay2324
#| fig-cap: "Receiver-operator Characteristic Curves For English-to-English Kindergarten Models (AY 2023/24)."
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.k.en.lnf,
  df.results.k.en.existing,
  df.results.k.en.model2,
  df.results.k.en.model3
  # df.results.k.en.srt,
  # df.results.k.en.new
), group = "All", output = "roc")
# plot.eo <- plot_roc_curves_across_models(list(
#   df.results.k.en.lnf,
#   df.results.k.en.existing,
#   df.results.k.en.model2,
#   df.results.k.en.model3
#   # df.results.k.en.srt,
#   # df.results.k.en.new
#   ), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.k.en.lnf,
  df.results.k.en.existing,
  df.results.k.en.model2,
  df.results.k.en.model3
  # df.results.k.en.srt,
  # df.results.k.en.new
), group = "EL", output = "roc")

plots.roc.k <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                                         # plot.eo + labs(title = " "),
                                         plot.el + labs(title = " ")
),
nrow = 2,
labels = c("K - All Students", "K - English Learners")
)
plots.roc.k
```
\FloatBarrier
\newpage
### English-to-English - Grade 1
\FloatBarrier

```{r model-1-en-wre-ay2324}

modelname <- "0. WRE only"
results.1.en.wre = build_prediction_model(df.2324.en,
                                          grd = "G1",
                                          lg = "English",
                                          mdl = "wre_e"
)

df.results.1.en.wre <- results.1.en.wre[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.en.wre <- results.1.en.wre[[2]]

# create and save plots
plots.1.en.wre <- plot_roc_curves_within_model(df.results.1.en.wre, disaggregated = FALSE)
```

```{r model-1-en-existing-ay2324}

modelname <- "1. WRE, EVO, RANO, LSF"
results.1.en.existing = build_prediction_model(df.2324.en,
                                               grd = "G1",
                                               lg = "English",
                                               mdl = "wre_e + evo_e + rano_e + lsf_e"
)

df.results.1.en.existing <- results.1.en.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.en.existing <- results.1.en.existing[[2]]

# create and save plots
plots.1.en.existing <- plot_roc_curves_within_model(df.results.1.en.existing, disaggregated = FALSE)
```

```{r model-1-en-model2-ay2324}

modelname <- "2. WRE, EVO, RANO, LSF"
results.1.en.model2 = build_prediction_model(df.2324.en,
                                             grd = "G1",
                                             lg = "English",
                                             mdl = "wre_e + evo_e + rano_e + lsf_e"
)

df.results.1.en.model2 <- results.1.en.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.en.model2 <- results.1.en.model2[[2]]

# create and save plots
plots.1.en.model2 <- plot_roc_curves_within_model(df.results.1.en.model2, disaggregated = FALSE)
```

```{r model-1-en-model3-ay2324}

modelname <- "2. WRE, RANO, LSF"
results.1.en.model3 = build_prediction_model(df.2324.en,
                                             grd = "G1",
                                             lg = "English",
                                             mdl = "wre_e + rano_e + lsf_e"
)

df.results.1.en.model3 <- results.1.en.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.en.model3 <- results.1.en.model3[[2]]

# create and save plots
plots.1.en.model3 <- plot_roc_curves_within_model(df.results.1.en.model3, disaggregated = FALSE)
```


```{r model-1-en-new-ay2324}

modelname <- "3. WRE, LSF, RANL"
results.1.en.new = build_prediction_model(df.2324.en,
                                          grd = "G1",
                                          lg = "English",
                                          mdl = "wre_e + lsf_e + ranl_e"
)

df.results.1.en.new <- results.1.en.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.en.new <- results.1.en.new[[2]]

# create and save plots
plots.1.en.new <- plot_roc_curves_within_model(df.results.1.en.new, disaggregated = FALSE)
```

```{r }
#| label: fig-roc-1-en-ay2324
#| fig-cap: "Receiver-operator Characteristic Curves For English-to-English Grade 1 Models (AY 2023/24)."
#| fig.height: 3
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.1.en.wre,
  df.results.1.en.existing,
  # df.results.1.en.model2,
  df.results.1.en.model3
  # df.results.1.en.new
), group = "All", output = "roc")
plot.eo <- plot_roc_curves_across_models(list(
  df.results.1.en.wre,
  df.results.1.en.existing,
  # df.results.1.en.model2,
  df.results.1.en.model3
  # df.results.1.en.new
), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.1.en.wre,
  df.results.1.en.existing,
  # df.results.1.en.model2,
  df.results.1.en.model3
  # df.results.1.en.new
),  group = "EL", output = "roc")

plots.roc.1 <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                                         # plot.eo + labs(title = " "),
                                         plot.el + labs(title = " ")
),
nrow = 2,
labels = c("G1 - All Students", "G1 - English Learners")
)
plots.roc.1
```
\newpage
\FloatBarrier
### English-to-English - Grade 2
\FloatBarrier

```{r model-2-en-wre-ay2324}

modelname <- "0. WRE only"
results.2.en.wre = build_prediction_model(df.2324.en,
                                          grd = "G2",
                                          lg = "English",
                                          mdl = "wre_e"
)

df.results.2.en.wre <- results.2.en.wre[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.en.wre <- results.2.en.wre[[2]]

# create and save plots
plots.2.en.wre <- plot_roc_curves_within_model(df.results.2.en.wre, disaggregated = FALSE)
```

```{r model-2-en-existing-ay2324}

modelname <- "1. WRE, EVO, RANL"
results.2.en.existing = build_prediction_model(df.2324.en,
                                               grd = "G2",
                                               lg = "English",
                                               mdl = "wre_e + evo_e + ranl_e"
)

df.results.2.en.existing <- results.2.en.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.en.existing <- results.2.en.existing[[2]]

# create and save plots
plots.2.en.existing <- plot_roc_curves_within_model(df.results.2.en.existing, disaggregated = FALSE)
```

```{r model-2-en-model2-ay2324, eval=FALSE}

modelname <- "2. WRE, EVO, RANL, SPE"
results.2.en.model2 = build_prediction_model(df.2324.en,
                                             grd = "G2",
                                             lg = "English",
                                             mdl = "wre_e + evo_e + ranl_e + spe_e"
)

df.results.2.en.model2 <- results.2.en.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.en.model2 <- results.2.en.model2[[2]]

# create and save plots
plots.2.en.model2 <- plot_roc_curves_within_model(df.results.2.en.model2, disaggregated = FALSE)
```

```{r model-2-en-model3-ay2324, eval=FALSE}

modelname <- "3. WRE, RANL, SPE"
results.2.en.model3 = build_prediction_model(df.2324.en,
                                             grd = "G2",
                                             lg = "English",
                                             mdl = "wre_e + ranl_e + spe_e"
)

df.results.2.en.model3 <- results.2.en.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.en.model3 <- results.2.en.model3[[2]]

# create and save plots
plots.2.en.model3 <- plot_roc_curves_within_model(df.results.2.en.model3, disaggregated = FALSE)
```

```{r model-2-en-new-ay2324}

modelname <- "3. WRE, LSF, RANL"
results.2.en.new = build_prediction_model(df.2324.en,
                                          grd = "G2",
                                          lg = "English",
                                          mdl = "wre_e + lsf_e + ranl_e"
)

df.results.2.en.new <- results.2.en.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.en.new <- results.2.en.new[[2]]

# create and save plots
plots.2.en.new <- plot_roc_curves_within_model(df.results.2.en.new, disaggregated = FALSE)
```


```{r}
#| label: fig-roc-2-en-ay2324
#| fig-cap: "Receiver-operator Characteristic Curves For English-to-English Grade 2 Models (AY 2023/24)."
#| fig.height: 3
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.2.en.wre,
  df.results.2.en.existing
  # df.results.2.en.model2,
  # df.results.2.en.model3
  # df.results.2.en.new
), group = "All", output = "roc")
plot.eo <- plot_roc_curves_across_models(list(
  df.results.2.en.wre,
  df.results.2.en.existing
  # df.results.2.en.model2,
  # df.results.2.en.model3
  # df.results.2.en.new
), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.2.en.wre,
  df.results.2.en.existing
  # df.results.2.en.model2,
  # df.results.2.en.model3
  # df.results.2.en.new
), group = "EL", output = "roc")

plots.roc.2 <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                                         # plot.eo + labs(title = " "),
                                         plot.el + labs(title = " ")
),
nrow = 2,
labels = c("G2 - All Students", "G2 - English Learners")
)
plots.roc.2
```
\newpage
\FloatBarrier
### Spanish-to-Spanish - Kindergarten
\FloatBarrier

```{r model-k-es-lnf-ay2324}

modelname <- "1. LNF only"
results.k.es.lnf = build_prediction_model(df.2324.es,
                                          grd = "K",
                                          lg = "Spanish",
                                          mdl = "lnf_s"
)

df.results.k.es.lnf <- results.k.es.lnf[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.lnf <- results.k.es.lnf[[2]]

# create and save plots
plots.k.es.lnf <- plot_roc_curves_within_model(df.results.k.es.lnf, disaggregated = FALSE)
```

```{r model-k-es-existing-ay2324}

modelname <- "1. LNF, EVO, RANO, ELIR"
results.k.es.existing = build_prediction_model(df.2324.es,
                                               grd = "K",
                                               lg = "Spanish",
                                               mdl = "lnf_s + evo_s + rano_s + elir_s"
)

df.results.k.es.existing <- results.k.es.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.existing <- results.k.es.existing[[2]]

# create and save plots
plots.k.es.existing <- plot_roc_curves_within_model(df.results.k.es.existing, disaggregated = FALSE)
```

```{r model-k-es-model2-ay2324}

modelname <- "2. LNF, EVO, RANO"
results.k.es.model2 = build_prediction_model(df.2324.es,
                                             grd = "K",
                                             lg = "Spanish",
                                             mdl = "lnf_s + evo_s + rano_s"
                                             )

df.results.k.es.model2 <- results.k.es.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.model2 <- results.k.es.model2[[2]]

# create and save plots
plots.k.es.model2 <- plot_roc_curves_within_model(df.results.k.es.model2, disaggregated = FALSE)
```

```{r model-k-es-model3-ay2324}

modelname <- "3. LNF, RANO, ELIR"
results.k.es.model3 = build_prediction_model(df.2324.es,
                                             grd = "K",
                                             lg = "Spanish",
                                             mdl = "lnf_s + elir_s + rano_s"
)

df.results.k.es.model3 <- results.k.es.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.model3 <- results.k.es.model3[[2]]

# create and save plots
plots.k.es.model3 <- plot_roc_curves_within_model(df.results.k.es.model3, disaggregated = FALSE)
```

```{r model-k-es-srt-ay2324}

modelname <- "3. SRT only"
results.k.es.srt = build_prediction_model(df.2324.es,
                                          grd = "K",
                                          lg = "Spanish",
                                          mdl = "srt_s"
)

df.results.k.es.srt <- results.k.es.srt[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.srt <- results.k.es.srt[[2]]

# create and save plots
plots.k.es.srt <- plot_roc_curves_within_model(df.results.k.es.srt, disaggregated = FALSE)
```

```{r model-k-es-new-ay2324}

modelname <- "4. SRT, LNF, EVO, RANL"
results.k.es.new = build_prediction_model(df.2324.es,
                                          grd = "K",
                                          lg = "Spanish",
                                          mdl = "srt_s + lnf_s + evo_s + ranl_s"
)

df.results.k.es.new <- results.k.es.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.new <- results.k.es.new[[2]]

# create and save plots
plots.k.es.new <- plot_roc_curves_within_model(df.results.k.es.new, disaggregated = FALSE)
```

```{r}
#| label: fig-roc-k-es-ay2324
#| fig-cap: "Receiver-operator Characteristic Curves For Spanish-to-Spanish Kindergarten Models (AY 2023/24)."
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.k.es.lnf,
  df.results.k.es.existing,
  df.results.k.es.model2,
  df.results.k.es.model3
  # df.results.k.es.srt,
  # df.results.k.es.new
), group = "All", output = "roc")
# plot.eo <- plot_roc_curves_across_models(list(df.results.k.es.lnf, df.results.k.es.existing, df.results.k.es.srt, df.results.k.es.new), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.k.es.lnf,
  df.results.k.es.existing,
  df.results.k.es.model2,
  df.results.k.es.model3
  # df.results.k.es.srt,
  # df.results.k.es.new
), group = "EL", output = "roc")

plots.roc.k <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                                         # plot.eo + labs(title = " "),
                                         plot.el + labs(title = " ")
),
nrow = 2,
labels = c("K - All Students", "K - English Learners")
)
plots.roc.k
```


\newpage\FloatBarrier
### Spanish-to-Spanish - Grade 1
\FloatBarrier


```{r model-1-es-wre-ay2324}

modelname <- "0. WRE only"
results.1.es.wre = build_prediction_model(df.2324.es,
                                          grd = "G1",
                                          lg = "Spanish",
                                          mdl = "wre_s"
)

df.results.1.es.wre <- results.1.es.wre[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.es.wre <- results.1.es.wre[[2]]

# create and save plots
plots.1.es.wre <- plot_roc_curves_within_model(df.results.1.es.wre, disaggregated = FALSE)
```

```{r model-1-es-existing-ay2324}

modelname <- "1. WRE, EVO, RANO, LSF"
results.1.es.existing = build_prediction_model(df.2324.es,
                                               grd = "G1",
                                               lg = "Spanish",
                                               mdl = "wre_s + evo_s + rano_s + lsf_s"
)

df.results.1.es.existing <- results.1.es.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.es.existing <- results.1.es.existing[[2]]

# create and save plots
plots.1.es.existing <- plot_roc_curves_within_model(df.results.1.es.existing, disaggregated = FALSE)
```


```{r model-1-es-model2-ay2324}

modelname <- "2. WRE, EVO, RANO, LSF"
results.1.es.model2 = build_prediction_model(df.2324.es,
                                             grd = "G1",
                                             lg = "Spanish",
                                             mdl = "wre_s + evo_s + rano_s + lsf_s"
)

df.results.1.es.model2 <- results.1.es.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.es.model2 <- results.1.es.model2[[2]]

# create and save plots
plots.1.es.model2 <- plot_roc_curves_within_model(df.results.1.es.model2, disaggregated = FALSE)
```

```{r model-1-es-model3-ay2324}

modelname <- "2. WRE, RANO, LSF"
results.1.es.model3 = build_prediction_model(df.2324.es,
                                             grd = "G1",
                                             lg = "Spanish",
                                             mdl = "wre_s + rano_s + lsf_s"
)

df.results.1.es.model3 <- results.1.es.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.es.model3 <- results.1.es.model3[[2]]

# create and save plots
plots.1.es.model3 <- plot_roc_curves_within_model(df.results.1.es.model3, disaggregated = FALSE)
```

```{r model-1-es-new-ay2324}

modelname <- "3. WRE, LSF, RANL"
results.1.es.new = build_prediction_model(df.2324.es,
                                          grd = "G1",
                                          lg = "Spanish",
                                          mdl = "wre_s + lsf_s + ranl_s"
)

df.results.1.es.new <- results.1.es.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.es.new <- results.1.es.new[[2]]

# create and save plots
plots.1.es.new <- plot_roc_curves_within_model(df.results.1.es.new, disaggregated = FALSE)
```


```{r}
#| label: fig-roc-1-es-ay2324
#| fig-cap: "Receiver-operator Characteristic Curves For Spanish-to-Spanish Grade 1 Models (AY 2023/24)."
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.1.es.wre,
  df.results.1.es.existing,
  # df.results.1.es.model2,
  df.results.1.es.model3
  # df.results.1.es.new
), group = "All", output = "roc")
# plot.eo <- plot_roc_curves_across_models(list(df.results.1.es.wre, df.results.1.es.existing, df.results.1.es.new), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.1.es.wre,
  df.results.1.es.existing,
  df.results.1.es.model2,
  df.results.1.es.model3
  # df.results.1.es.new
), group = "EL", output = "roc")

plots.roc.1 <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                                         # plot.eo + labs(title = " "),
                                         plot.el + labs(title = " ")
),
nrow = 2,
labels = c("G1 - All Students", "G1 - English Learners")
)
plots.roc.1
```

\newpage
\FloatBarrier
### Spanish-to-Spanish - Grade 2
\FloatBarrier

```{r model-2-es-wre-ay2324}

modelname <- "0. WRE only"
results.2.es.wre = build_prediction_model(df.2324.es,
                                          grd = "G2",
                                          lg = "Spanish",
                                          mdl = "wre_s"
)

df.results.2.es.wre <- results.2.es.wre[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.es.wre <- results.2.es.wre[[2]]

# create and save plots
plots.2.es.wre <- plot_roc_curves_within_model(df.results.2.es.wre, disaggregated = FALSE)
```

```{r model-2-es-existing-ay2324}

modelname <- "1. WRE, EVO, RANL"
results.2.es.existing = build_prediction_model(df.2324.es,
                                               grd = "G2",
                                               lg = "Spanish",
                                               mdl = "wre_s + evo_s + ranl_s"
)

df.results.2.es.existing <- results.2.es.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.es.existing <- results.2.es.existing[[2]]

# create and save plots
plots.2.es.existing <- plot_roc_curves_within_model(df.results.2.es.existing, disaggregated = FALSE)
```

```{r model-2-es-model2-ay2324, eval=FALSE}
# specify model
df.model <- df %>% 
  filter(lang == "es-US") %>%
  mutate(model_lang = "Spanish",
         task_lang = "Spanish",
         risk = case_when(risk_es == "Struggling" ~ 1,
                          risk_es == "Not struggling" ~ 0
         )
  ) %>% 
  filter(!is.na(risk))

modelname <- "2. WRE, EVO, RANL, SPE"
results.2.es.model2 = build_prediction_model(df.model,
                                             grd = "G2",
                                             lg = "Spanish",
                                             mdl = "wre_s + evo_s + ranl_s + spe_s"
)

df.results.2.es.model2 <- results.2.es.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.es.model2 <- results.2.es.model2[[2]]

# create and save plots
plots.2.es.model2 <- plot_roc_curves_within_model(df.results.2.es.model2, disaggregated = FALSE)
```


```{r model-2-es-model3-ay2324, eval=FALSE}
# specify model
df.model <- df %>% 
  filter(lang == "es-US") %>%
  mutate(model_lang = "Spanish",
         task_lang = "Spanish",
         risk = case_when(risk_es == "Struggling" ~ 1,
                          risk_es == "Not struggling" ~ 0
         )
  ) %>% 
  filter(!is.na(risk))

modelname <- "2. WRE, RANL, SPE"
results.2.es.model3 = build_prediction_model(df.model,
                                             grd = "G2",
                                             lg = "Spanish",
                                             mdl = "wre_s + ranl_s + spe_s"
)

df.results.2.es.model3 <- results.2.es.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.es.model3 <- results.2.es.model3[[2]]

# create and save plots
plots.2.es.model3 <- plot_roc_curves_within_model(df.results.2.es.model3, disaggregated = FALSE)
```

```{r model-2-es-new-ay2324}
# specify model
df.model <- df %>% 
  filter(lang == "es-US") %>%
  mutate(model_lang = "Spanish",
         task_lang = "Spanish",
         risk = case_when(risk_es == "Struggling" ~ 1,
                          risk_es == "Not struggling" ~ 0
         )
  ) %>% 
  filter(!is.na(risk))

modelname <- "3. WRE, LSF, RANL"
results.2.es.new = build_prediction_model(df.model,
                                          grd = "G2",
                                          lg = "Spanish",
                                          mdl = "wre_s + lsf_s + ranl_s"
)

df.results.2.es.new <- results.2.es.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.es.new <- results.2.es.new[[2]]

# create and save plots
plots.2.es.new <- plot_roc_curves_within_model(df.results.2.es.new, disaggregated = FALSE)
```


```{r}
#| label: fig-roc-2-es-ay2324
#| fig-cap: "Receiver-operator Characteristic Curves For Spanish-to-Spanish Grade 2 Models (AY 2023/24)."
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.2.es.wre,
  df.results.2.es.existing
  # df.results.2.es.model2,
  # df.results.2.es.model3
  # df.results.2.es.new
), group = "All", output = "roc")
# plot.eo <- plot_roc_curves_across_models(list(df.results.2.es.wre, df.results.2.es.existing, df.results.2.es.new), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.2.es.wre,
  df.results.2.es.existing
  # df.results.2.es.model2,
  # df.results.2.es.model3
  # df.results.2.es.new
), group = "EL", output = "roc")

plots.roc.2 <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                                         # plot.eo + labs(title = " "),
                                         plot.el + labs(title = " ")
),
nrow = 2,
labels = c("G2 - All Students", "G2 - English Learners")
)
plots.roc.2
```

\blandscape

## Models Evaluations - Sensitivity and Specificity

```{r model-comparison-en-ay2324}
df.modelcomp <- df.2324.en

# df.modelcomp <- df %>% 
#   filter(lang == "en-US") %>%
#   mutate(model_lang = "English",
#          task_lang = "English",
#          risk = case_when(risk_en == "Struggling" ~ 1,
#                           risk_en == "Not struggling" ~ 0
#          )
#   )

models <- list("K" = list("0. LNF only" = "lnf_e",
                          "1. LNF, RANO, ELIR, EVO" = "lnf_e + rano_e + elir_e + evo_e",
                          "2. LNF, RANO, EVO" = "lnf_e + rano_e + evo_e",
                          "3. LNF, RANO, ELIR" = "lnf_e + rano_e + elir_e"
),
"G1" = list("0. WRE only" = "wre_e",
            "1. WRE, RANO, LSF, EVO" = "wre_e + rano_e + lsf_e + evo_e",
            "2. WRE, RANO, LSF" = "wre_e + rano_e + lsf_e"
),
"G2" = list("0. WRE only" = "wre_e",
            "1. WRE, RANL, EVO" = "wre_e + ranl_e + evo_e",
            "2. WRE, RANL" = "wre_e + ranl_e"
)
)

lg = "English"

# roc.curves <- list()
# proc.curves <- list()
pred.dfs.en <- list()
# aucs <- list()

# Create a dataframe to hold evaluation metrics
dummy_cm <- confusionMatrix(factor(c(0,1,1,0)), factor(c(0,1,0,1)))
dummy_metrics <- extract_metrics(dummy_cm)
df.eval.en <- data.frame(matrix(ncol = ncol(dummy_metrics), nrow = 0))
colnames(df.eval.en) <- colnames(dummy_metrics)
df.eval.en <- data.frame(grade = as.character(), 
                         model = as.character(),
                         predictors = as.character(),
                         group = as.character(),
                         method = as.character(),
                         opt.cut.value = as.numeric()
) |> 
  cbind(df.eval.en)

groups = c("All", "EL", "EO")
lg ="English"

for (grade in names(models)) {
  for (model in names(models[[grade]])) {
    
    predictors <- gsub(" \\+ ", ", ", models[[grade]][[model]], fixed = FALSE)
    
    # build model
    results <- build_prediction_model(df.modelcomp,
                                      grd = grade,
                                      lg = lg,
                                      mdl = models[[grade]][[model]]
    )
    df.risk.pred <- results[[1]] |> 
      # add relevant demographic variables
      left_join(df |>
                  select(c(student_id,
                           el,
                           race,
                           ethnicity,
                           ever_disability
                  )
                  ) |>
                  unique(),
                by = "student_id"
      )
    
    #  "PROC01", "ObservedPrev","MeanPrev"
    for (method in c("Youden", "MaxSpSe", "SpEqualSe", "MaxEfficiency", "PrevalenceMatching")) {
      opt.cut <- optimal.cutpoints(X = "pred.prob",
                                   status = "risk",
                                   tag.healthy = 0,
                                   methods = method,
                                   data = as.data.frame(df.risk.pred),
                                   pop.prev = NULL, 
                                   ci.fit = TRUE,
                                   conf.level = 0.95,
                                   trace = FALSE
      )
      opt.cut.value <- get(method, opt.cut)$Global$optimal.cutoff$cutoff[1]
      
      df.temp.outer <- df.risk.pred |> 
        mutate(risk.pred = if_else(pred.prob <= opt.cut.value, 0, 1))
      
      
      for (group in groups) {
        
        if (group == "All") {
          cm = confusionMatrix(table(predicted = df.temp.outer$risk.pred,
                                     reference = df.temp.outer$risk),
                               positive = "1")
          
          df.out <- extract_metrics(cm) |> 
            mutate(grade = grade,
                   model = model,
                   predictors = predictors,
                   group = group,
                   method = method,
                   opt.cut = opt.cut.value
            )
          
          df.eval.en <- df.eval.en |> 
            rbind(df.out)
          
        } else if (group %in% c("EO", "EL")) {
          
          df.temp.inner <- df.temp.outer |> 
            filter(el == group)
          
          n.crit = df.temp.inner %>% nrow()
          if (n.crit < 5) next
          
          cm = confusionMatrix(table(predicted = df.temp.inner$risk.pred,
                                     reference = df.temp.inner$risk),
                               positive = "1")
          
          df.out <- extract_metrics(cm) |> 
            mutate(grade = grade,
                   model = model,
                   predictors = predictors,
                   group = group,
                   method = method,
                   opt.cut = opt.cut.value
            )
          
          df.eval.en <- df.eval.en |> 
            rbind(df.out)
        }
      }
      
      # save plots and prediction outputs for later use
      # out = plot_roc_curves_within_model(df.risk.pred)
      # roc.curves[[model]] <- out[[1]] + labs(title = model,
      #                                        subtitle = paste0("risk ~ ", models[[model]]))
      # proc.curves[[model]] <- out[[2]] + labs(title = model,
      #                                         subtitle = paste0("risk ~ ", models[[model]]))
      pred.dfs.en[[model]] <- df.risk.pred
      # aucs[[model]] <- mean(out[[1]]$data$AUROC)
    }
  }
}

# re-arrange columns
df.eval.en <- df.eval.en |> 
  select(c(grade, group, model, predictors, method, opt.cut), everything())

df.eval.en.wide.2324 <- df.eval.en |> 
  pivot_wider(names_from = group, values_from = Accuracy:Balanced.Accuracy) |> 
  select(c(grade, model, predictors, method, opt.cut,
           contains("_All"),
           contains("_EL"),
           contains("_EO")
  )
  )
```

```{r model-comparison-es-ay2324}
df.modelcomp <- df.2324.es

# df.modelcomp <- df %>% 
#   filter(lang == "es-US") %>%
#   mutate(model_lang = "Spanish",
#          task_lang = "Spanish",
#          risk = case_when(risk_es == "Struggling" ~ 1,
#                           risk_es == "Not struggling" ~ 0
#          )
#   )

models <- list("K" = list("0. LNF only" = "lnf_s",
                          "1. LNF, RANO, ELIR, EVO" = "lnf_s + rano_s + elir_s + evo_s",
                          "2. LNF, RANO, EVO" = "lnf_s + rano_s + evo_s",
                          "3. LNF, RANO, ELIR" = "lnf_s + rano_s + elir_s"
),
"G1" = list("0. WRE only" = "wre_s",
            "1. WRE, RANO, LSF, EVO" = "wre_s + rano_s + lsf_s + evo_s",
            "2. WRE, RANO, LSF" = "wre_s + rano_s + lsf_s"
),
"G2" = list("0. WRE only" = "wre_s",
            "1. WRE, RANL, EVO" = "wre_s + ranl_s + evo_s",
            "2. WRE, RANL" = "wre_s + ranl_s"
)
)

lg = "Spanish"

# roc.curves <- list()
# proc.curves <- list()
pred.dfs.es <- list()
# aucs <- list()

# Create a dataframe to hold evaluation metrics
dummy_cm <- confusionMatrix(factor(c(0,1,1,0)), factor(c(0,1,0,1)))
dummy_metrics <- extract_metrics(dummy_cm)
df.eval.es <- data.frame(matrix(ncol = ncol(dummy_metrics), nrow = 0))
colnames(df.eval.es) <- colnames(dummy_metrics)
df.eval.es <- data.frame(grade = as.character(), 
                         model = as.character(),
                         predictors = as.character(),
                         group = as.character(),
                         method = as.character(),
                         opt.cut.value = as.numeric()
) |> 
  cbind(df.eval.es)

groups = c("All", "EL", "EO")
lg ="Spanish"

for (grade in names(models)) {
  for (model in names(models[[grade]])) {
    
    predictors <- gsub(" \\+ ", ", ", models[[grade]][[model]], fixed = FALSE)
    
    # build model
    results <- build_prediction_model(df.modelcomp,
                                      grd = grade,
                                      lg = lg,
                                      mdl = models[[grade]][[model]]
    )
    df.risk.pred <- results[[1]] |> 
      # add relevant demographic variables
      left_join(df |>
                  select(c(student_id,
                           el,
                           race,
                           ethnicity,
                           ever_disability
                  )
                  ) |>
                  unique(),
                by = "student_id"
      )
    
    #  "PROC01", "ObservedPrev","MeanPrev"
    for (method in c("Youden", "MaxSpSe", "SpEqualSe", "MaxEfficiency", "PrevalenceMatching")) {
      opt.cut <- optimal.cutpoints(X = "pred.prob",
                                   status = "risk",
                                   tag.healthy = 0,
                                   methods = method,
                                   data = as.data.frame(df.risk.pred),
                                   pop.prev = NULL, 
                                   ci.fit = TRUE,
                                   conf.level = 0.95,
                                   trace = FALSE
      )
      opt.cut.value <- get(method, opt.cut)$Global$optimal.cutoff$cutoff[1]
      
      df.temp.outer <- df.risk.pred |> 
        mutate(risk.pred = if_else(pred.prob <= opt.cut.value, 0, 1))
      
      for (group in groups) {
        
        if (group == "All") {
          cm = confusionMatrix(table(predicted = df.temp.outer$risk.pred,
                                     reference = df.temp.outer$risk),
                               positive = "1")
          
          df.out <- extract_metrics(cm) |> 
            mutate(grade = grade,
                   model = model,
                   predictors = predictors,
                   group = group,
                   method = method,
                   opt.cut = opt.cut.value
            )
          
          df.eval.es <- df.eval.es |> 
            rbind(df.out)
          
        } else if (group %in% c("EO", "EL")) {
          
          df.temp.inner <- df.temp.outer |> 
            filter(el == group)
          
          n.crit = df.temp.inner %>% nrow()
          if (n.crit < 10) next
          
          df.temp.inner$risk.pred <- factor(df.temp.inner$risk.pred, levels = c(0, 1))
          df.temp.inner$risk <- factor(df.temp.inner$risk, levels = c(0, 1))

          cm = confusionMatrix(table(predicted = df.temp.inner$risk.pred,
                                     reference = df.temp.inner$risk),
                               positive = "1")
          
          df.out <- extract_metrics(cm) |> 
            mutate(grade = grade,
                   model = model,
                   predictors = predictors,
                   group = group,
                   method = method,
                   opt.cut = opt.cut.value
            )
          
          df.eval.es <- df.eval.es |> 
            rbind(df.out)
        }
      }
      
      # save plots and prediction outputs for later use
      # out = plot_roc_curves_within_model(df.risk.pred)
      # roc.curves[[model]] <- out[[1]] + labs(title = model,
      #                                        subtitle = paste0("risk ~ ", models[[model]]))
      # proc.curves[[model]] <- out[[2]] + labs(title = model,
      #                                         subtitle = paste0("risk ~ ", models[[model]]))
      pred.dfs.es[[model]] <- df.risk.pred
      # aucs[[model]] <- mean(out[[1]]$data$AUROC)
    }
  }
}

# re-arrange columns
df.eval.es <- df.eval.es |> 
  select(c(grade, group, model, predictors, method, opt.cut), everything())

# deal with lacking data for EO and EL groups
df.eval.es <- df.eval.es %>% 
  rbind(df.eval.es %>% 
          mutate(group = "EL"
          ) %>% 
          mutate(across(-c(grade, group, model, predictors, method, opt.cut), ~ NA))
  ) %>% 
  rbind(df.eval.es %>% 
          mutate(group = "EO"
          ) %>% 
          mutate(across(-c(grade, group, model, predictors, method, opt.cut), ~ NA))
  )

df.eval.es.wide.2324 <- df.eval.es |> 
  filter(group == "All") %>% 
  pivot_wider(names_from = group, values_from = Accuracy:Balanced.Accuracy) |> 
  select(c(grade, model, predictors, method, opt.cut,
           contains("_All"),
           contains("_EL"),
           contains("_EO")
  )
  )
```

```{r eval=FALSE}
#| label: tbl-model-eval-summary-ay2324
#| tbl-cap: "Summary of Best English and Spanish Prediction Models (AY 2023/24).\\newline"

df.eval.en.wide.2324 |> 
  filter(method == "Youden") |> 
  mutate(grade = factor(grade, levels = c("K", "G1", "G2")),
         # mutate(grade = factor(grade, levels = c("K", "G1", "G2")) |> 
         #          fct_recode("K" = "Kindergarten",
         #                     "G1" = "Grade 1",
         #                     "G2" = "Grade 2"
         #          ),
         model = str_sub(model, 3, 100)
  ) |>
  arrange(grade, model) |> 
  unique() |> 
  select(c(grade,
           model,
           # method,
           contains("Sensitivity"),
           contains("Specificity")
           # contains("Balanced.Accuracy")
  )
  ) |> 
  # mutate(across(where(is.numeric), color_format)) |> 
  left_join(
    df.eval.es.wide.2324 |> 
      filter(method == "Youden") |> 
      mutate(grade = factor(grade, levels = c("K", "G1", "G2")),
             model = str_sub(model, 3, 100)
      ) |>
      arrange(grade, model) |> 
      unique() |> 
      select(c(grade,
               model,
               # method,
               Sensitivity_es = Sensitivity_All,
               Specificity_es = Specificity_All
               # contains("Balanced.Accuracy")
      )
      ) 
  ) |> 
  # mutate(across(where(is.numeric), color_format)) |> 
  kable(format = "latex",
        escape = FALSE,
        booktabs = TRUE,
        digits = 3,
        align = c("l", "l", "c", "c", "c", "c", "c", "c", "c", "c"),
        col.names = c("Grade",
                      "Model",
                      # "Method",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "All"
        ),
        linesep = c(rep("", 3), "\\addlinespace", rep("", 2), "\\addlinespace", rep("", 5))
  ) |> 
  kable_styling(
    full_width = FALSE,
    latex_options = c("scale_down")
  ) |> 
  add_header_above(c(" " = 2, "Sensitivity" = 3, "Specificity" = 3, "Sensitivity", "Specificity")) |> 
  add_header_above(c(" " = 2, "English" = 6, "Spanish" = 2))
```

```{r}
#| label: tbl-model-eval-summary-ay2324-new
#| tbl-cap: "Summary of Best English and Spanish Prediction Models (AY 2023/24).\\newline"

df.eval.en.wide.2324 |> 
  filter(method == "Youden") |> 
  mutate(grade = factor(grade, levels = c("K", "G1", "G2")),
         model = str_sub(model, 3, 100)
  ) |>
  arrange(grade, model) |> 
  unique() |> 
  select(c(grade,
           model,
           # method,
           contains("Sensitivity"),
           contains("Specificity"),
           contains("Accuracy_"),
           contains("Balanced.Accuracy")
  )
  ) |> 
  # mutate(across(where(is.numeric), color_format)) |> 
  left_join(
    df.eval.es.wide.2324 |> 
      filter(method == "Youden") |> 
      mutate(grade = factor(grade, levels = c("K", "G1", "G2")),
             model = str_sub(model, 3, 100)
      ) |>
      arrange(grade, model) |> 
      unique() |> 
      select(c(grade,
               model,
               # method,
               Sensitivity_es = Sensitivity_All,
               Specificity_es = Specificity_All,
               Accuracy_es = Accuracy_All,
               Balanced.Accuracy_es = Balanced.Accuracy_All
      )
      ) 
  ) |> 
  mutate(across(where(is.numeric), color_format)) |>
  kable(format = "latex",
        escape = FALSE,
        booktabs = TRUE,
        digits = 3,
        align = c("l", "l", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c"),
        col.names = c("Grade",
                      "Model",
                      # "Method",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "All",
                      "All",
                      "All"
        ),
        linesep = c(rep("", 3), "\\addlinespace", rep("", 2), "\\addlinespace", rep("", 5))
  ) |> 
  kable_styling(
    full_width = FALSE,
    latex_options = c("scale_down")
  ) |> 
  add_header_above(c(" " = 2, "Sensitivity" = 3, "Specificity" = 3, "Accuracy" = 3, "Balanced Acc." = 3, "Sens.", "Spec.", "Acc.", "BA")) |> 
  add_header_above(c(" " = 2, "English" = 12, "Spanish" = 4)) %>% 
  add_footnote(label = "Note. green: >= .8; black: >= .7; yellow: >= .6; red otherwise", notation = "none")
```

\elandscape

\FloatBarrier
# PART II - Analysis of 2024/25 Data

## Sample

Throughout, I only included tasks taken by at least 50 students per language per grade, so as to not distort the task selection analyses.

```{r ay2425}
df.2425 <- df %>% 
  filter(ay == "AY 24/25")
N <- length(unique(df.2425$student_id))
n.school <- length(unique(df.2425$school))
n.district <- length(unique(df.2425$district))
```

- *N* = `r N`
- `r n.school` schools
- `r n.district` districts

\blandscape
```{r}
#| label: tbl-ay2425-sample
#| tbl-cap: "Demographic Characteristics of the AY 24/25 Sample (N = 1,390) by Grade and Screening Language \\newline"
df.2425 %>% 
  select(c(student_id, grade, lang, gender, race, ethnicity, el, ever_disability, home_lang)) %>%
  unique() %>% 
  mutate(lang = case_when(lang == "en-US" ~ "English",
                          lang == "es-US" ~ "Spanish",
                          )) %>% 
  select(-student_id) %>% 
  tbl_strata(strata = lang,
             .tbl_fun =
               ~ .x |>
               tbl_summary(by = grade,
                           label = c(gender ~ "Gender",
                                     race ~ "Race",
                                     ethnicity ~ "Ethnicity",
                                     el ~ "ELPD",
                                     ever_disability  ~ "Ever IEP/504",
                                     home_lang ~ "Home Language"
                                     )
                           ) %>% 
               modify_footnote(everything() ~ NA)
             )
```
\elandscape
\FloatBarrier

```{r dfs-ay}
df.2425.en <- df.2425 %>% 
  filter(lang == "en-US",
         !is.na(outcomescore_en)
  ) %>% 
  mutate(model_lang = "English",
         task_lang = "English"
  ) %>% 
  rename(risk = risk_en,
         risk_ext = risk_ext_en,
         outcomescore = outcomescore_en,
         outcomepercentile = outcomepercentile_en
  ) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0
  )
  ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  filter(!is.na(risk))

df.2425.es <- df.2425 %>% 
  filter(lang == "es-US",
         !is.na(outcomescore_es)
  ) %>% 
  mutate(model_lang = "Spanish",
         task_lang = "Spanish") %>% 
  rename(risk = risk_es,
         risk_ext = risk_ext_es,
         outcomescore = outcomescore_es,
         outcomepercentile = outcomepercentile_es
  ) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0
  )
  ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  filter(!is.na(risk))
```

## Descriptives

### Distributions of English Multitudes Tasks

```{r}
#| label: fig-distributions-en
#| fig-cap: "Distributions of English Multitudes Tasks by Grade and Language (Fall 2024)."
#| fig-height: 5
plots <- list()
df.2425.en$grade <- factor(df.2425.en$grade, levels = c("K", "G1", "G2"))

for (t in unique(df.2425.en$task)) {
  plot <- df.2425.en %>% 
    filter(task == t) %>% 
    ggplot(aes(x = score, group = grade, fill = factor(grade, levels = c("K", "G1", "G2")))) +
    geom_density(alpha = .5) +
    theme(legend.position = "bottom") +
    scale_fill_manual(values = palette.grades, drop = FALSE) +
    labs(x = "Score",
         y = " ",
         title = paste(t),
         fill = "Grade") +
    theme(axis.text.y= element_blank(),
          axis.title.x = element_blank())
  plots[[t]] <- plot
}

ggarrange(plotlist = plots,
          common.legend = TRUE,
          legend = "bottom"
          )
```

\newpage
### Distributions of Spanish Multitudes Tasks
\FloatBarrier

```{r}
#| label: fig-distributions-es
#| fig-cap: "Distributions of Spanish Multitudes Tasks by Grade and Language (Fall 2024)."
#| fig-height: 5

plots <- list()
for (t in unique(df.2425.es$task)) {
  plot <- df.2425.es %>% 
    mutate(grade = factor(grade, levels = c("K", "G1", "G2"))) %>% 
    filter(task == t) %>% 
    ggplot(aes(x = score, group = grade, fill = factor(grade, levels = c("K", "G1", "G2")))) +
    geom_density(alpha = .5) +
    theme(legend.position = "bottom") +
    scale_fill_manual(values = palette.grades, drop = FALSE) +
    labs(x = "Score",
         y = " ",
         title = paste(t),
         fill = "Grade") +
    theme(axis.text.y= element_blank(),
          axis.title.x = element_blank())
  plots[[t]] <- plot
}

ggarrange(plotlist = plots,
          common.legend = TRUE,
          legend = "bottom"
          )
```

\newpage
### Distributions of Outcome Measures

```{r df-outcomes}
df.2425.outcomes <- df.2425 |> 
  filter(!is.na(outcomescore_en)) %>% 
  mutate(risk = risk_en,
         risk_ext = risk_ext_en,
         outcomescore = outcomescore_en,
         model_lang = "English") %>% 
  rbind(
    df.2425 |> 
      filter(!is.na(outcomescore_es)) %>% 
      mutate(risk = risk_es,
             risk_ext = risk_ext_es,
             outcomescore = outcomescore_es,
             model_lang = "Spanish")
  )
```

```{r fig.height=2.5}
#| label: fig-outcomes-en-ay2425
#| fig-cap: "Distribution of Woodcock-Johnson/-Muñoz Basic Reading Skills Cluster (for Kindergarten) Broad Reading Cluster (for Grades 1 and 2) by Grade and Language with Struggling Readers (</= 20th Percentile) Highlighted  (Spring 2025)."

df.2425.outcomes %>% 
  ggplot(aes(x = outcomescore)) +
  geom_vline(xintercept = 70, colour = "gray", linetype = 2) +
  geom_vline(xintercept = 85, colour = "gray", linetype = 2) +
  geom_vline(xintercept = 100, colour = "darkgray", linetype = 1) +
  geom_vline(xintercept = 115, colour = "gray", linetype = 2) +
  geom_vline(xintercept = 130, colour = "gray", linetype = 2) +
  geom_histogram(#fill = "darkgreen",
    aes(group = risk, fill = risk),
    binwidth = 1
    ) +
  facet_grid(cols = vars(grade),
             rows = vars(model_lang),
             scales = "free"
             ) +
  scale_x_continuous(breaks = c(70, 85, 100, 115, 130), labels = c("70\n(-2SD)", "85\n", "100\n(M)", "115", "130\n(+2SD)")) +
  labs(x = "Standard Score",
       y = "No. of Students",
       fill = "Defined as") +
  theme(legend.position = "bottom") +
  scale_fill_manual(values = palette3)
```

```{r}
#| label: tbl-outcomes-en-ay2425
#| tbl-cap: "Comparison of Proportions of Struggling Readers (</= 20th Percentile) in the Study Sample Based on Overall Multitudes Sample and on Published Woodcock-Johnson/Muñoz Norms (Spring 2025)."

df.2425.outcomes |> 
  select(c(student_id, model_lang,grade, risk_ext, risk)) |>
  unique() |> 
  select(-student_id) |> 
  tbl_strata(strata = model_lang,
             .tbl_fun =
               ~ .x %>% tbl_summary(by = c(grade),
                                    label = c(risk ~ "Sample-based",
                                              risk_ext ~ "Norm-based"
                                    )
                                    )
             ) |> 
  modify_footnote(everything() ~ NA) |> 
  modify_header(label ~ "**Reference**") |>
  as_kable_extra(booktabs = TRUE,
                 linesep = c("", "", "\\addlinespace")
                 ) |> 
  kable_styling(latex_options = c("scale_down"))
```

<!-- \blandscape -->
\FloatBarrier

\newpage
### Correlations

```{r correlation-dfs}

df.corr <- df %>% 
  filter(ay == "AY 24/25"
         # !is.na(outcomescore_en)
         ) %>%
  select(c(student_id, grade, task, el, score)) %>% 
  rbind(
    df %>% 
      filter(ay == "AY 24/25",
             !is.na(outcomescore_en)
      ) %>%
      mutate(task = case_when(grade == "K" & !is.na(outcomescore_en) ~ "wcj_c_basicreadingskills",
                              grade == "G1" & !is.na(outcomescore_en) ~ "wcj_c_broadreading",
                              grade == "G2" & !is.na(outcomescore_en) ~ "wcj_c_broadreading",
                              ),
             score = outcomescore_en
             ) %>% 
      select(c(student_id, grade, task, el, score)) %>% 
      unique()
  ) %>% 
  rbind(
    df %>% 
      filter(ay == "AY 24/25",
             !is.na(outcomescore_es)
      ) %>%
      mutate(task = case_when(grade == "K" & !is.na(outcomescore_es) ~ "wcm_c_basicreadingskills",
                              grade == "G1" & !is.na(outcomescore_es) ~ "wcm_c_broadreading",
                              grade == "G2" & !is.na(outcomescore_es) ~ "wcm_c_broadreading",
                              ),
             score = outcomescore_es
             ) %>% 
      select(c(student_id, grade, task, el, score)) %>% 
      unique()
  )
```

\FloatBarrier
#### Kindergarten - English
\FloatBarrier
```{r}
#| label: fig-corrs-k-en-ay2425
#| fig-cap: "Correlations Between English Multitudes Tasks and English Reading Outcome Scores (Kindergarten; AY 2024/25)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcj", task) | grepl("_e", task)), "K")
```

\FloatBarrier
\newpage
#### Kindergarten - Spanish
\FloatBarrier
```{r}
#| label: fig-corrs-k-es-ay2425
#| fig-cap: "Correlations Between Spanish Multitudes Tasks and Spanish Reading Outcome Scores (Kindergarten; AY 2024/25)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcm", task) | grepl("_s", task)), "K")
```

\FloatBarrier
\newpage
#### Grade 1 - English
\FloatBarrier
```{r}
#| label: fig-corrs-1-en-ay2425
#| fig-cap: "Correlations Between English Multitudes Tasks and English Reading Outcome Scores (Grade 1; AY 2024/25)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcj", task) | grepl("_e", task)), "G1")
```

\FloatBarrier
\newpage
#### Grade 1 - Spanish
\FloatBarrier
```{r}
#| label: fig-corrs-1-es-ay2425
#| fig-cap: "Correlations Between Spanish Multitudes Tasks and Spanish Reading Outcome Scores (Grade 1; AY 2024/25)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcm", task) | grepl("_s", task)), "G1")
```


\FloatBarrier
\newpage
#### Grade 2 - English
\FloatBarrier
```{r}
#| label: fig-corrs-2-en-ay2425
#| fig-cap: "Correlations Between English Multitudes Tasks and English Reading Outcome Scores (Grade 2; AY 2024/25)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcj", task) | grepl("_e", task)), "G2")
```

\FloatBarrier
\newpage
#### Grade 2 - Spanish
\FloatBarrier
```{r}
#| label: fig-corrs-2-es-ay2425
#| fig-cap: "Correlations Between Spanish Multitudes Tasks and Spanish Reading Outcome Scores (Grade 2; AY 2024/25)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcm", task) | grepl("_s", task)), "G2")
```

\FloatBarrier
\newpage
## Task Selection

```{r task-selection-dfs-ay2425}
df.temp.en <- df %>% 
  filter(ay == "AY 24/25",
         lang == "en-US",
         !is.na(outcomescore_en)
         ) %>% 
  mutate(model_lang = "English",
         task_lang = "English"
         ) %>% 
  rename(risk = risk_en,
         risk_ext = risk_ext_en,
         outcomescore = outcomescore_en,
         outcomepercentile = outcomepercentile_en
         ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0,
                          )
         )

df.temp.es <- df %>% 
  filter(ay == "AY 24/25",
         lang == "es-US",
         !is.na(outcomescore_es)
         ) %>% 
  mutate(model_lang = "Spanish",
         task_lang = "Spanish"
         ) %>% 
  rename(risk = risk_es,
         risk_ext = risk_ext_es,
         outcomescore = outcomescore_es,
         outcomepercentile = outcomepercentile_es
         ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0,
                          )
         )

df.temp.en.cl <- df %>% 
  filter(ay == "AY 24/25",
         !is.na(outcomescore_en),
         !is.na(outcomescore_es),
         ) %>% 
  rename(risk = risk_en,
         risk_ext = risk_ext_en,
         outcomescore = outcomescore_en,
         outcomepercentile = outcomepercentile_en
         ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0,
                          )
         )

df.temp.es.cl <- df %>% 
  filter(ay == "AY 24/25",
         !is.na(outcomescore_en),
         !is.na(outcomescore_es),
         ) %>% 
  rename(risk = risk_es,
         risk_ext = risk_ext_es,
         outcomescore = outcomescore_es,
         outcomepercentile = outcomepercentile_es
         ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0,
                          )
         )
```

```{r boruta-k-en-ay2425, cache=TRUE}
boruta.k.en.all <- boruta_task_selection(df.temp.en, "K", "English")
boruta.k.en.el <- boruta_task_selection(df.temp.en |> filter(el == "EL"), "K", "English")
boruta.k.en.eo <- boruta_task_selection(df.temp.en |> filter(el == "EO"), "K", "English")
  
agg.results.all <- boruta.k.en.all$aggregated_results |> 
  mutate(group = "All") |> 
  rbind(boruta.k.en.el$aggregated_results |> mutate(group = "EL")) |> 
  rbind(boruta.k.en.eo$aggregated_results |> mutate(group = "EO"))

plot.boruta.k.en <- plot_boruta(agg.results.all)
```

```{r boruta-k-es-ay2425, cache=TRUE}
boruta.k.es.all <- boruta_task_selection(df.temp.es, "K", "Spanish")

agg.results.all <- boruta.k.es.all$aggregated_results |> 
  mutate(group = "All")

plot.boruta.k.es <- plot_boruta(agg.results.all)
```

```{r boruta-1-en-ay2425, cache=TRUE}
boruta.1.en.all <- boruta_task_selection(df.temp.en, "G1", "English")
boruta.1.en.el <- boruta_task_selection(df.temp.en |> filter(el == "EL"), "G1", "English")
boruta.1.en.eo <- boruta_task_selection(df.temp.en |> filter(el == "EO"), "G1", "English")

agg.results.all <- boruta.1.en.all$aggregated_results |> 
  mutate(group = "All") |> 
  rbind(boruta.1.en.el$aggregated_results |> mutate(group = "EL")) |> 
  rbind(boruta.1.en.eo$aggregated_results |> mutate(group = "EO"))

plot.boruta.1.en <- plot_boruta(agg.results.all)
```

```{r boruta-1-es-ay2425, cache=TRUE}
boruta.1.es.all <- boruta_task_selection(df.temp.es, "G1", "Spanish")

agg.results.all <- boruta.1.es.all$aggregated_results |> 
  mutate(group = "All")

plot.boruta.1.es <- plot_boruta(agg.results.all)
```

```{r boruta-2-en-ay2425, cache=TRUE}
boruta.2.en.all <- boruta_task_selection(df.temp.en, "G2", "English")
boruta.2.en.el <- boruta_task_selection(df.temp.en |> filter(el == "EL"), "G2", "English")
boruta.2.en.eo <- boruta_task_selection(df.temp.en |> filter(el == "EO"), "G2", "English")

agg.results.all <- boruta.2.en.all$aggregated_results |> 
  mutate(group = "All") |> 
  rbind(boruta.2.en.el$aggregated_results |> mutate(group = "EL")) |> 
  rbind(boruta.2.en.eo$aggregated_results |> mutate(group = "EO"))

plot.boruta.2.en <- plot_boruta(agg.results.all)
```

```{r boruta-2-es-ay2425, cache=TRUE}
boruta.2.es.all <- boruta_task_selection(df.temp.es, "G2", "Spanish")
# boruta.2.es.el <- boruta_task_selection(df |> filter(el == "EL"), "Grade 2", "Spanish")
# boruta.2.es.eo <- boruta_task_selection(df |> filter(el == "EO"), "Grade 2", "Spanish")

agg.results.all <- boruta.2.es.all$aggregated_results |> 
  mutate(group = "All")

plot.boruta.2.es <- plot_boruta(agg.results.all)
```

\FloatBarrier
### English-to-English (English to English)

```{r}
#| label: fig-boruta-en-ay2425
#| fig-cap: "Mean Task Importance Obtained From Boruta Algorithm for English-to-English Predictions, with Results Disaggregated by English Proficiency Designation (AY 2024/25)."
#| fig-height: 7
#| fig-width: 8
ggarrange(plotlist = list(plot.boruta.k.en, plot.boruta.1.en, plot.boruta.2.en),
          common.legend = TRUE,
          legend = "bottom",
          nrow = 3, ncol = 1,
          labels = c("K", "G1", "G2")
          # labels = "AUTO"
          )
```

\newpage
\FloatBarrier
### Spanish-to-Spanish (Spanish to Spanish)

```{r}
#| label: fig-boruta-es-ay2425
#| fig-cap: "Mean Task Importance Obtained From Boruta Algorithm for Spanish-to-Spanish Predictions (AY 2024/25)."
#| fig-height: 7
#| fig-width: 8
#| 
ggarrange(plotlist = list(plot.boruta.k.es, plot.boruta.1.es, plot.boruta.2.es),
          common.legend = TRUE,
          legend = "bottom",
          nrow = 3, ncol = 1,
          labels = c("K", "G1", "G2"
                     )
          )
```

\FloatBarrier
\newpage

## Models Evaluations - ROC Curves

### English-to-English - Kindergarten
\FloatBarrier

```{r model-k-en-lnf-ay2425}

modelname <- "0. LNF only"
results.k.en.lnf = build_prediction_model(df.2425.en,
                                           grd = "K",
                                           lg = "English",
                                           mdl = "lnf_e"
                                           )

df.results.k.en.lnf <- results.k.en.lnf[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
                       )
                     ) |>
              unique(),
            by = "student_id"
            ) |> 
  mutate(model = modelname)

model.k.en.lnf <- results.k.en.lnf[[2]]

# create and save plots
plots.k.en.lnf <- plot_roc_curves_within_model(df.results.k.en.lnf, disaggregated = FALSE)
```

```{r model-k-en-existing-ay2425}

modelname <- "1. LNF, EVO, RANO, ELIR"
results.k.en.existing = build_prediction_model(df.2425.en,
                                           grd = "K",
                                           lg = "English",
                                           mdl = "lnf_e + evo_e + rano_e + elir_e"
                                           )

df.results.k.en.existing <- results.k.en.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
                       )
                     ) |>
              unique(),
            by = "student_id"
            ) |> 
  mutate(model = modelname)

model.k.en.existing <- results.k.en.existing[[2]]

# create and save plots
plots.k.en.existing <- plot_roc_curves_within_model(df.results.k.en.existing, disaggregated = FALSE)
```

```{r model-k-en-model2-ay2425}

modelname <- "2. LNF, EVO, RANO"
results.k.en.model2 = build_prediction_model(df.2425.en,
                                           grd = "K",
                                           lg = "English",
                                           mdl = "lnf_e + evo_e + rano_e"
                                           )

df.results.k.en.model2 <- results.k.en.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
                       )
                     ) |>
              unique(),
            by = "student_id"
            ) |> 
  mutate(model = modelname)

model.k.en.model2 <- results.k.en.model2[[2]]

# create and save plots
plots.k.en.model2 <- plot_roc_curves_within_model(df.results.k.en.model2, disaggregated = FALSE)
```

```{r model-k-en-model3-ay2425}

modelname <- "3. LNF, RANO, ELIR"
results.k.en.model3 = build_prediction_model(df.2425.en,
                                             grd = "K",
                                             lg = "English",
                                             mdl = "lnf_e + elir_e + rano_e"
)

df.results.k.en.model3 <- results.k.en.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.en.model3 <- results.k.en.model3[[2]]

# create and save plots
plots.k.en.model3 <- plot_roc_curves_within_model(df.results.k.en.model3, disaggregated = FALSE)
```

```{r model-k-en-srt-ay2425}

modelname <- "3. SRT only"
results.k.en.srt = build_prediction_model(df.2425.en,
                                           grd = "K",
                                           lg = "English",
                                           mdl = "srt_e"
                                           )

df.results.k.en.srt <- results.k.en.srt[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
                       )
                     ) |>
              unique(),
            by = "student_id"
            ) |> 
  mutate(model = modelname)

model.k.en.srt <- results.k.en.srt[[2]]

# create and save plots
plots.k.en.srt <- plot_roc_curves_within_model(df.results.k.en.srt, disaggregated = FALSE)
```

```{r model-k-en-new-ay2425}

modelname <- "4. SRT, LNF, EVO, RANL"
results.k.en.new = build_prediction_model(df.2425.en,
                                           grd = "K",
                                           lg = "English",
                                           mdl = "srt_e + lnf_e + evo_e + ranl_e"
                                           )

df.results.k.en.new <- results.k.en.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
                       )
                     ) |>
              unique(),
            by = "student_id"
            ) |> 
  mutate(model = modelname)

model.k.en.new <- results.k.en.new[[2]]

# create and save plots
plots.k.en.new <- plot_roc_curves_within_model(df.results.k.en.new, disaggregated = FALSE)
```

```{r}
#| label: fig-roc-k-en
#| fig-cap: "Receiver-operator Characteristic Curves For English-to-English Kindergarten Models (AY 2024/25)."
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.k.en.lnf,
  df.results.k.en.existing,
  df.results.k.en.model2,
  df.results.k.en.model3
  # df.results.k.en.srt,
  # df.results.k.en.new
  ), group = "All", output = "roc")
# plot.eo <- plot_roc_curves_across_models(list(
#   df.results.k.en.lnf,
#   df.results.k.en.existing,
#   df.results.k.en.model2,
#   df.results.k.en.model3
#   # df.results.k.en.srt,
#   # df.results.k.en.new
#   ), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.k.en.lnf,
  df.results.k.en.existing,
  df.results.k.en.model2,
  df.results.k.en.model3
  # df.results.k.en.srt,
  # df.results.k.en.new
  ), group = "EL", output = "roc")

plots.roc.k <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                          # plot.eo + labs(title = " "),
                          plot.el + labs(title = " ")
                          ),
          nrow = 2,
          labels = c("K - All Students", "K - English Learners")
          )
plots.roc.k
```
\FloatBarrier
\newpage
### English-to-English - Grade 1
\FloatBarrier

```{r model-1-en-wre-ay2425}

modelname <- "0. WRE only"
results.1.en.wre = build_prediction_model(df.2425.en,
                                           grd = "G1",
                                           lg = "English",
                                           mdl = "wre_e"
                                           )

df.results.1.en.wre <- results.1.en.wre[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
                       )
                     ) |>
              unique(),
            by = "student_id"
            ) |> 
  mutate(model = modelname)

model.1.en.wre <- results.1.en.wre[[2]]

# create and save plots
plots.1.en.wre <- plot_roc_curves_within_model(df.results.1.en.wre, disaggregated = FALSE)
```

```{r model-1-en-existing-ay2425}

modelname <- "1. WRE, EVO, RANO, LSF"
results.1.en.existing = build_prediction_model(df.2425.en,
                                           grd = "G1",
                                           lg = "English",
                                           mdl = "wre_e + evo_e + rano_e + lsf_e"
                                           )

df.results.1.en.existing <- results.1.en.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
                       )
                     ) |>
              unique(),
            by = "student_id"
            ) |> 
  mutate(model = modelname)

model.1.en.existing <- results.1.en.existing[[2]]

# create and save plots
plots.1.en.existing <- plot_roc_curves_within_model(df.results.1.en.existing, disaggregated = FALSE)
```

```{r model-1-en-model2-ay2425}

modelname <- "2. WRE, EVO, RANO, LSF"
results.1.en.model2 = build_prediction_model(df.2425.en,
                                             grd = "G1",
                                             lg = "English",
                                             mdl = "wre_e + evo_e + rano_e + lsf_e"
)

df.results.1.en.model2 <- results.1.en.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.en.model2 <- results.1.en.model2[[2]]

# create and save plots
plots.1.en.model2 <- plot_roc_curves_within_model(df.results.1.en.model2, disaggregated = FALSE)
```

```{r model-1-en-model3-ay2425}

modelname <- "2. WRE, RANO, LSF"
results.1.en.model3 = build_prediction_model(df.2425.en,
                                             grd = "G1",
                                             lg = "English",
                                             mdl = "wre_e + rano_e + lsf_e"
)

df.results.1.en.model3 <- results.1.en.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.en.model3 <- results.1.en.model3[[2]]

# create and save plots
plots.1.en.model3 <- plot_roc_curves_within_model(df.results.1.en.model3, disaggregated = FALSE)
```


```{r model-1-en-new-ay2425}

modelname <- "3. WRE, LSF, RANL"
results.1.en.new = build_prediction_model(df.2425.en,
                                           grd = "G1",
                                           lg = "English",
                                           mdl = "wre_e + lsf_e + ranl_e"
                                           )

df.results.1.en.new <- results.1.en.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
                       )
                     ) |>
              unique(),
            by = "student_id"
            ) |> 
  mutate(model = modelname)

model.1.en.new <- results.1.en.new[[2]]

# create and save plots
plots.1.en.new <- plot_roc_curves_within_model(df.results.1.en.new, disaggregated = FALSE)
```

```{r }
#| label: fig-roc-1-en-ay2425
#| fig-cap: "Receiver-operator Characteristic Curves For English-to-English Grade 1 Models (AY 2024/25)."
#| fig.height: 3
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.1.en.wre,
  df.results.1.en.existing,
  # df.results.1.en.model2,
  df.results.1.en.model3
  # df.results.1.en.new
  ), group = "All", output = "roc")
plot.eo <- plot_roc_curves_across_models(list(
  df.results.1.en.wre,
  df.results.1.en.existing,
  # df.results.1.en.model2,
  df.results.1.en.model3
  # df.results.1.en.new
  ), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.1.en.wre,
  df.results.1.en.existing,
  # df.results.1.en.model2,
  df.results.1.en.model3
  # df.results.1.en.new
  ),  group = "EL", output = "roc")

plots.roc.1 <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                          # plot.eo + labs(title = " "),
                          plot.el + labs(title = " ")
                          ),
          nrow = 2,
          labels = c("G1 - All Students", "G1 - English Learners")
          )
plots.roc.1
```
\newpage
\FloatBarrier
### English-to-English - Grade 2
\FloatBarrier

```{r model-2-en-wre-ay2425}

modelname <- "0. WRE only"
results.2.en.wre = build_prediction_model(df.2425.en,
                                           grd = "G2",
                                           lg = "English",
                                           mdl = "wre_e"
                                           )

df.results.2.en.wre <- results.2.en.wre[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
                       )
                     ) |>
              unique(),
            by = "student_id"
            ) |> 
  mutate(model = modelname)

model.2.en.wre <- results.2.en.wre[[2]]

# create and save plots
plots.2.en.wre <- plot_roc_curves_within_model(df.results.2.en.wre, disaggregated = FALSE)
```

```{r model-2-en-existing-ay2425}

modelname <- "1. WRE, EVO, RANL"
results.2.en.existing = build_prediction_model(df.2425.en,
                                           grd = "G2",
                                           lg = "English",
                                           mdl = "wre_e + evo_e + ranl_e"
                                           )

df.results.2.en.existing <- results.2.en.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
                       )
                     ) |>
              unique(),
            by = "student_id"
            ) |> 
  mutate(model = modelname)

model.2.en.existing <- results.2.en.existing[[2]]

# create and save plots
plots.2.en.existing <- plot_roc_curves_within_model(df.results.2.en.existing, disaggregated = FALSE)
```

```{r model-2-en-model2-ay2425}

modelname <- "2. WRE, EVO, RANL, SPE"
results.2.en.model2 = build_prediction_model(df.2425.en,
                                           grd = "G2",
                                           lg = "English",
                                           mdl = "wre_e + evo_e + ranl_e + spe_e"
                                           )

df.results.2.en.model2 <- results.2.en.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
                       )
                     ) |>
              unique(),
            by = "student_id"
            ) |> 
  mutate(model = modelname)

model.2.en.model2 <- results.2.en.model2[[2]]

# create and save plots
plots.2.en.model2 <- plot_roc_curves_within_model(df.results.2.en.model2, disaggregated = FALSE)
```

```{r model-2-en-model3-ay2425}

modelname <- "3. WRE, RANL, SPE"
results.2.en.model3 = build_prediction_model(df.2425.en,
                                           grd = "G2",
                                           lg = "English",
                                           mdl = "wre_e + ranl_e + spe_e"
                                           )

df.results.2.en.model3 <- results.2.en.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
                       )
                     ) |>
              unique(),
            by = "student_id"
            ) |> 
  mutate(model = modelname)

model.2.en.model3 <- results.2.en.model3[[2]]

# create and save plots
plots.2.en.model3 <- plot_roc_curves_within_model(df.results.2.en.model3, disaggregated = FALSE)
```

```{r model-2-en-new-ay2425}

modelname <- "3. WRE, LSF, RANL"
results.2.en.new = build_prediction_model(df.2425.en,
                                           grd = "G2",
                                           lg = "English",
                                           mdl = "wre_e + lsf_e + ranl_e"
                                           )

df.results.2.en.new <- results.2.en.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
                       )
                     ) |>
              unique(),
            by = "student_id"
            ) |> 
  mutate(model = modelname)

model.2.en.new <- results.2.en.new[[2]]

# create and save plots
plots.2.en.new <- plot_roc_curves_within_model(df.results.2.en.new, disaggregated = FALSE)
```


```{r}
#| label: fig-roc-2-en-ay2425
#| fig-cap: "Receiver-operator Characteristic Curves For English-to-English Grade 2 Models (AY 2024/25)."
#| fig.height: 3
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.2.en.wre,
  df.results.2.en.existing,
  df.results.2.en.model2,
  df.results.2.en.model3
  # df.results.2.en.new
  ), group = "All", output = "roc")
plot.eo <- plot_roc_curves_across_models(list(
  df.results.2.en.wre,
  df.results.2.en.existing,
  df.results.2.en.model2,
  df.results.2.en.model3
  # df.results.2.en.new
  ), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.2.en.wre,
  df.results.2.en.existing,
  df.results.2.en.model2,
  df.results.2.en.model3
  # df.results.2.en.new
  ), group = "EL", output = "roc")

plots.roc.2 <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                          # plot.eo + labs(title = " "),
                          plot.el + labs(title = " ")
                          ),
          nrow = 2,
          labels = c("G2 - All Students", "G2 - English Learners")
          )
plots.roc.2
```
\newpage
\FloatBarrier
### Spanish-to-Spanish - Kindergarten
\FloatBarrier

```{r model-k-es-lnf-ay2425}

modelname <- "1. LNF only"
results.k.es.lnf = build_prediction_model(df.2425.es,
                                          grd = "K",
                                          lg = "Spanish",
                                          mdl = "lnf_s"
)

df.results.k.es.lnf <- results.k.es.lnf[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.lnf <- results.k.es.lnf[[2]]

# create and save plots
plots.k.es.lnf <- plot_roc_curves_within_model(df.results.k.es.lnf, disaggregated = FALSE)
```

```{r model-k-es-existing-ay2425}

modelname <- "1. LNF, EVO, RANO, ELIR"
results.k.es.existing = build_prediction_model(df.2425.es,
                                               grd = "K",
                                               lg = "Spanish",
                                               mdl = "lnf_s + evo_s + rano_s + elir_s"
)

df.results.k.es.existing <- results.k.es.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.existing <- results.k.es.existing[[2]]

# create and save plots
plots.k.es.existing <- plot_roc_curves_within_model(df.results.k.es.existing, disaggregated = FALSE)
```


```{r model-k-es-model2-ay2425}

modelname <- "2. LNF, EVO, RANO"
results.k.es.model2 = build_prediction_model(df.2425.es,
                                             grd = "K",
                                             lg = "Spanish",
                                             mdl = "lnf_s + evo_s + rano_s"
)

df.results.k.es.model2 <- results.k.es.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.model2 <- results.k.es.model2[[2]]

# create and save plots
plots.k.es.model2 <- plot_roc_curves_within_model(df.results.k.es.model2, disaggregated = FALSE)
```

```{r model-k-es-model3-ay2425}

modelname <- "3. LNF, RANO, ELIR"
results.k.es.model3 = build_prediction_model(df.2425.es,
                                             grd = "K",
                                             lg = "Spanish",
                                             mdl = "lnf_s + elir_s + rano_s"
)

df.results.k.es.model3 <- results.k.es.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.model3 <- results.k.es.model3[[2]]

# create and save plots
plots.k.es.model3 <- plot_roc_curves_within_model(df.results.k.es.model3, disaggregated = FALSE)
```


```{r model-k-es-srt-ay2425}

modelname <- "3. SRT only"
results.k.es.srt = build_prediction_model(df.2425.es,
                                          grd = "K",
                                          lg = "Spanish",
                                          mdl = "srt_s"
)

df.results.k.es.srt <- results.k.es.srt[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.srt <- results.k.es.srt[[2]]

# create and save plots
plots.k.es.srt <- plot_roc_curves_within_model(df.results.k.es.srt, disaggregated = FALSE)
```

```{r model-k-es-new-ay2425}

modelname <- "4. SRT, LNF, EVO, RANL"
results.k.es.new = build_prediction_model(df.2425.es,
                                          grd = "K",
                                          lg = "Spanish",
                                          mdl = "srt_s + lnf_s + evo_s + ranl_s"
)

df.results.k.es.new <- results.k.es.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.new <- results.k.es.new[[2]]

# create and save plots
plots.k.es.new <- plot_roc_curves_within_model(df.results.k.es.new, disaggregated = FALSE)
```

```{r}
#| label: fig-roc-k-es-ay2425
#| fig-cap: "Receiver-operator Characteristic Curves For Spanish-to-Spanish Kindergarten Models (AY 2024/25)."
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.k.es.lnf,
  df.results.k.es.existing,
  df.results.k.es.model2,
  df.results.k.es.model3
  # df.results.k.es.srt,
  # df.results.k.es.new
), group = "All", output = "roc")
# plot.eo <- plot_roc_curves_across_models(list(df.results.k.es.lnf, df.results.k.es.existing, df.results.k.es.srt, df.results.k.es.new), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.k.es.lnf,
  df.results.k.es.existing,
  df.results.k.es.model2,
  df.results.k.es.model3
  # df.results.k.es.srt,
  # df.results.k.es.new
), group = "EL", output = "roc")

plots.roc.k <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                                         # plot.eo + labs(title = " "),
                                         plot.el + labs(title = " ")
),
          nrow = 2,
labels = c("K - All Students", "K - English Learners")
)
plots.roc.k
```


\newpage\FloatBarrier
### Spanish-to-Spanish - Grade 1
\FloatBarrier

```{r model-1-es-wre-ay2425}

modelname <- "0. WRE only"
results.1.es.wre = build_prediction_model(df.2425.es,
                                          grd = "G1",
                                          lg = "Spanish",
                                          mdl = "wre_s"
)

df.results.1.es.wre <- results.1.es.wre[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.es.wre <- results.1.es.wre[[2]]

# create and save plots
plots.1.es.wre <- plot_roc_curves_within_model(df.results.1.es.wre, disaggregated = FALSE)
```

```{r model-1-es-existing-ay2425}

modelname <- "1. WRE, EVO, RANO, LSF"
results.1.es.existing = build_prediction_model(df.2425.es,
                                               grd = "G1",
                                               lg = "Spanish",
                                               mdl = "wre_s + evo_s + rano_s + lsf_s"
)

df.results.1.es.existing <- results.1.es.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.es.existing <- results.1.es.existing[[2]]

# create and save plots
plots.1.es.existing <- plot_roc_curves_within_model(df.results.1.es.existing, disaggregated = FALSE)
```


```{r model-1-es-model2-ay2425}

modelname <- "2. WRE, EVO, RANO, LSF"
results.1.es.model2 = build_prediction_model(df.2425.es,
                                             grd = "G1",
                                             lg = "Spanish",
                                             mdl = "wre_s + evo_s + rano_s + lsf_s"
)

df.results.1.es.model2 <- results.1.es.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.es.model2 <- results.1.es.model2[[2]]

# create and save plots
plots.1.es.model2 <- plot_roc_curves_within_model(df.results.1.es.model2, disaggregated = FALSE)
```

```{r model-1-es-model3-ay2425}

modelname <- "2. WRE, RANO, LSF"
results.1.es.model3 = build_prediction_model(df.2425.es,
                                             grd = "G1",
                                             lg = "Spanish",
                                             mdl = "wre_s + rano_s + lsf_s"
)

df.results.1.es.model3 <- results.1.es.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.es.model3 <- results.1.es.model3[[2]]

# create and save plots
plots.1.es.model3 <- plot_roc_curves_within_model(df.results.1.es.model3, disaggregated = FALSE)
```

```{r model-1-es-new-ay2425}

modelname <- "3. WRE, LSF, RANL"
results.1.es.new = build_prediction_model(df.2425.es,
                                          grd = "G1",
                                          lg = "Spanish",
                                          mdl = "wre_s + lsf_s + ranl_s"
)

df.results.1.es.new <- results.1.es.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.es.new <- results.1.es.new[[2]]

# create and save plots
plots.1.es.new <- plot_roc_curves_within_model(df.results.1.es.new, disaggregated = FALSE)
```


```{r}
#| label: fig-roc-1-es-ay2425
#| fig-cap: "Receiver-operator Characteristic Curves For Spanish-to-Spanish Grade 1 Models (AY 2024/25)."
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.1.es.wre,
  df.results.1.es.existing,
  # df.results.1.es.model2,
  df.results.1.es.model3
  # df.results.1.es.new
  ), group = "All", output = "roc")
# plot.eo <- plot_roc_curves_across_models(list(df.results.1.es.wre, df.results.1.es.existing, df.results.1.es.new), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.1.es.wre,
  df.results.1.es.existing,
  df.results.1.es.model2,
  df.results.1.es.model3
  # df.results.1.es.new
  ), group = "EL", output = "roc")

plots.roc.1 <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                                         # plot.eo + labs(title = " "),
                                         plot.el + labs(title = " ")
),
nrow = 2,
labels = c("G1 - All Students", "G1 - English Learners")
)
plots.roc.1
```

\newpage
\FloatBarrier
### Spanish-to-Spanish - Grade 2
\FloatBarrier

No data collected.

```{r model-2-es-wre-ay2425, eval=FALSE}

modelname <- "0. WRE only"
results.2.es.wre = build_prediction_model(df.2425.es,
                                          grd = "G2",
                                          lg = "Spanish",
                                          mdl = "wre_s"
)

df.results.2.es.wre <- results.2.es.wre[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.es.wre <- results.2.es.wre[[2]]

# create and save plots
plots.2.es.wre <- plot_roc_curves_within_model(df.results.2.es.wre, disaggregated = FALSE)
```

```{r model-2-es-existing-ay2425, eval=FALSE}

modelname <- "1. WRE, EVO, RANL"
results.2.es.existing = build_prediction_model(df.2425.es,
                                               grd = "G2",
                                               lg = "Spanish",
                                               mdl = "wre_s + evo_s + ranl_s"
)

df.results.2.es.existing <- results.2.es.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.es.existing <- results.2.es.existing[[2]]

# create and save plots
plots.2.es.existing <- plot_roc_curves_within_model(df.results.2.es.existing, disaggregated = FALSE)
```

```{r model-2-es-model2-ay2425, eval=FALSE}

modelname <- "2. WRE, EVO, RANL, SPE"
results.2.es.model2 = build_prediction_model(df.2425.es,
                                             grd = "G2",
                                             lg = "Spanish",
                                             mdl = "wre_s + evo_s + ranl_s + spe_s"
)

df.results.2.es.model2 <- results.2.es.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.es.model2 <- results.2.es.model2[[2]]

# create and save plots
plots.2.es.model2 <- plot_roc_curves_within_model(df.results.2.es.model2, disaggregated = FALSE)
```


```{r model-2-es-model3-ay2425, eval=FALSE}

modelname <- "2. WRE, RANL, SPE"
results.2.es.model3 = build_prediction_model(df.2425.es,
                                             grd = "G2",
                                             lg = "Spanish",
                                             mdl = "wre_s + ranl_s + spe_s"
)

df.results.2.es.model3 <- results.2.es.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.es.model3 <- results.2.es.model3[[2]]

# create and save plots
plots.2.es.model3 <- plot_roc_curves_within_model(df.results.2.es.model3, disaggregated = FALSE)
```

```{r model-2-es-new-ay2425, eval=FALSE}

modelname <- "3. WRE, LSF, RANL"
results.2.es.new = build_prediction_model(df.2425.es,
                                          grd = "G1",
                                          lg = "Spanish",
                                          mdl = "wre_s + lsf_s + ranl_s"
)

df.results.2.es.new <- results.2.es.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.es.new <- results.2.es.new[[2]]

# create and save plots
plots.2.es.new <- plot_roc_curves_within_model(df.results.2.es.new, disaggregated = FALSE)
```


```{r, eval=FALSE}
#| label: fig-roc-2-es-ay2425
#| fig-cap: "Receiver-operator Characteristic Curves For Spanish-to-Spanish Grade 2 Models (AY 2024/25)."
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.2.es.wre,
  df.results.2.es.existing,
  df.results.2.es.model2,
  df.results.2.es.model3
  # df.results.2.es.new
  ), group = "All", output = "roc")
# plot.eo <- plot_roc_curves_across_models(list(df.results.2.es.wre, df.results.2.es.existing, df.results.2.es.new), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.2.es.wre,
  df.results.2.es.existing,
  df.results.2.es.model2,
  df.results.2.es.model3
  # df.results.2.es.new
  ), group = "EL", output = "roc")

plots.roc.2 <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                                         # plot.eo + labs(title = " "),
                                         plot.el + labs(title = " ")
),
nrow = 2,
labels = c("G2 - All Students", "G2 - English Learners")
)
plots.roc.2
```


\blandscape

## Models Evaluations - Sensitivity and Specificity

```{r model-comparison-en-ay2425}
df.modelcomp <- df.2425.en

# df.modelcomp <- df %>% 
#   filter(lang == "en-US") %>%
#   mutate(model_lang = "English",
#          task_lang = "English",
#          risk = case_when(risk_en == "Struggling" ~ 1,
#                           risk_en == "Not struggling" ~ 0
#                           )
#          )

models <- list("K" = list("0. LNF only" = "lnf_e",
                          "1. LNF, RANO, ELIR, EVO" = "lnf_e + rano_e + elir_e + evo_e",
                          "2. LNF, RANO, EVO" = "lnf_e + rano_e + evo_e",
                          "3. LNF, RANO, ELIR" = "lnf_e + rano_e + elir_e"
),
"G1" = list("0. WRE only" = "wre_e",
            "1. WRE, RANO, LSF, EVO" = "wre_e + rano_e + lsf_e + evo_e",
            "2. WRE, RANO, LSF" = "wre_e + rano_e + lsf_e"
),
"G2" = list("0. WRE only" = "wre_e",
            "1. WRE, RANL, EVO" = "wre_e + ranl_e + evo_e",
            "2. WRE, RANL" = "wre_e + ranl_e"
)
)

lg = "English"

# roc.curves <- list()
# proc.curves <- list()
pred.dfs.en <- list()
# aucs <- list()

# Create a dataframe to hold evaluation metrics
dummy_cm <- confusionMatrix(factor(c(0,1,1,0)), factor(c(0,1,0,1)))
dummy_metrics <- extract_metrics(dummy_cm)
df.eval.en <- data.frame(matrix(ncol = ncol(dummy_metrics), nrow = 0))
colnames(df.eval.en) <- colnames(dummy_metrics)
df.eval.en <- data.frame(grade = as.character(), 
                         model = as.character(),
                         predictors = as.character(),
                         group = as.character(),
                         method = as.character(),
                         opt.cut.value = as.numeric()
                         ) |> 
  cbind(df.eval.en)

groups = c("All", "EL", "EO")
lg ="English"

for (grade in names(models)) {
  for (model in names(models[[grade]])) {
    
    predictors <- gsub(" \\+ ", ", ", models[[grade]][[model]], fixed = FALSE)
    
    # build model
    results <- build_prediction_model(df.modelcomp,
                                      grd = grade,
                                      lg = lg,
                                      mdl = models[[grade]][[model]]
    )
    df.risk.pred <- results[[1]] |> 
      # add relevant demographic variables
      left_join(df |>
                  select(c(student_id,
                           el,
                           race,
                           ethnicity,
                           ever_disability
                  )
                  ) |>
                  unique(),
                by = "student_id"
      )
    
    #  "PROC01", "ObservedPrev","MeanPrev"
    for (method in c("Youden", "MaxSpSe", "SpEqualSe", "MaxEfficiency", "PrevalenceMatching")) {
      opt.cut <- optimal.cutpoints(X = "pred.prob",
                                   status = "risk",
                                   tag.healthy = 0,
                                   methods = method,
                                   data = as.data.frame(df.risk.pred),
                                   pop.prev = NULL, 
                                   ci.fit = TRUE,
                                   conf.level = 0.95,
                                   trace = FALSE
      )
      opt.cut.value <- get(method, opt.cut)$Global$optimal.cutoff$cutoff[1]
      
      df.temp.outer <- df.risk.pred |> 
        mutate(risk.pred = if_else(pred.prob <= opt.cut.value, 0, 1))
      
      for (group in groups) {
        
        if (group == "All") {
          cm = confusionMatrix(table(predicted = df.temp.outer$risk.pred,
                                     reference = df.temp.outer$risk),
                               positive = "1")
          
          df.out <- extract_metrics(cm) |> 
            mutate(grade = grade,
                   model = model,
                   predictors = predictors,
                   group = group,
                   method = method,
                   opt.cut = opt.cut.value
            )
          
          df.eval.en <- df.eval.en |> 
            rbind(df.out)
          
        } else if (group %in% c("EO", "EL")) {
          
          df.temp.inner <- df.temp.outer |> 
            filter(el == group)
          
           n.crit = df.temp.inner %>% nrow()
          if (n.crit < 5) next
           
           df.temp.inner$risk.pred <- factor(df.temp.inner$risk.pred, levels = c(0, 1))
          df.temp.inner$risk <- factor(df.temp.inner$risk, levels = c(0, 1))
          
          cm = confusionMatrix(table(predicted = df.temp.inner$risk.pred,
                                     reference = df.temp.inner$risk),
                               positive = "1")
          
          df.out <- extract_metrics(cm) |> 
            mutate(grade = grade,
                   model = model,
                   predictors = predictors,
                   group = group,
                   method = method,
                   opt.cut = opt.cut.value
            )
          
          df.eval.en <- df.eval.en |> 
            rbind(df.out)
        }
      }
      
      # save plots and prediction outputs for later use
      # out = plot_roc_curves_within_model(df.risk.pred)
      # roc.curves[[model]] <- out[[1]] + labs(title = model,
      #                                        subtitle = paste0("risk ~ ", models[[model]]))
      # proc.curves[[model]] <- out[[2]] + labs(title = model,
      #                                         subtitle = paste0("risk ~ ", models[[model]]))
      pred.dfs.en[[model]] <- df.risk.pred
      # aucs[[model]] <- mean(out[[1]]$data$AUROC)
    }
  }
}

# re-arrange columns
df.eval.en <- df.eval.en |> 
  select(c(grade, group, model, predictors, method, opt.cut), everything())

df.eval.en.wide.2425 <- df.eval.en |> 
  pivot_wider(names_from = group, values_from = Accuracy:Balanced.Accuracy) |> 
  select(c(grade, model, predictors, method, opt.cut,
           contains("_All"),
           contains("_EL"),
           contains("_EO")
           )
         )
```

```{r model-comparison-es-ay2425}
df.modelcomp <- df.2425.es

# df.modelcomp <- df %>% 
#   filter(lang == "es-US") %>%
#   mutate(model_lang = "Spanish",
#          task_lang = "Spanish",
#          risk = case_when(risk_es == "Struggling" ~ 1,
#                           risk_es == "Not struggling" ~ 0
#          )
#   )

models <- list("K" = list("0. LNF only" = "lnf_s",
                          "1. LNF, RANO, ELIR, EVO" = "lnf_s + rano_s + elir_s + evo_s",
                          "2. LNF, RANO, EVO" = "lnf_s + rano_s + evo_s",
                          "3. LNF, RANO, ELIR" = "lnf_s + rano_s + elir_s"
),
"G1" = list("0. WRE only" = "wre_s",
            "1. WRE, RANO, LSF, EVO" = "wre_s + rano_s + lsf_s + evo_s",
            "2. WRE, RANO, LSF" = "wre_s + rano_s + lsf_s"
)
# "G2" = list("0. WRE only" = "wre_s",
#             "1. WRE, RANL, EVO" = "wre_s + ranl_s + evo_s",
#             "2. WRE, RANL" = "wre_s + ranl_s"
# )
)

lg = "Spanish"

# roc.curves <- list()
# proc.curves <- list()
pred.dfs.es <- list()
# aucs <- list()

# Create a dataframe to hold evaluation metrics
dummy_cm <- confusionMatrix(factor(c(0,1,1,0)), factor(c(0,1,0,1)))
dummy_metrics <- extract_metrics(dummy_cm)
df.eval.es <- data.frame(matrix(ncol = ncol(dummy_metrics), nrow = 0))
colnames(df.eval.es) <- colnames(dummy_metrics)
df.eval.es <- data.frame(grade = as.character(), 
                         model = as.character(),
                         predictors = as.character(),
                         group = as.character(),
                         method = as.character(),
                         opt.cut.value = as.numeric()
) |> 
  cbind(df.eval.es)

groups = c("All", "EL", "EO")
lg ="Spanish"

for (grade in names(models)) {
  for (model in names(models[[grade]])) {
    
    predictors <- gsub(" \\+ ", ", ", models[[grade]][[model]], fixed = FALSE)
    
    # build model
    results <- build_prediction_model(df.modelcomp,
                                      grd = grade,
                                      lg = lg,
                                      mdl = models[[grade]][[model]]
    )
    df.risk.pred <- results[[1]] |> 
      # add relevant demographic variables
      left_join(df |>
                  select(c(student_id,
                           el,
                           race,
                           ethnicity,
                           ever_disability
                  )
                  ) |>
                  unique(),
                by = "student_id"
      )
    
    #  "PROC01", "ObservedPrev","MeanPrev"
    for (method in c("Youden", "MaxSpSe", "SpEqualSe", "MaxEfficiency", "PrevalenceMatching")) {
      opt.cut <- optimal.cutpoints(X = "pred.prob",
                                   status = "risk",
                                   tag.healthy = 0,
                                   methods = method,
                                   data = as.data.frame(df.risk.pred),
                                   pop.prev = NULL, 
                                   ci.fit = TRUE,
                                   conf.level = 0.95,
                                   trace = FALSE
      )
      opt.cut.value <- get(method, opt.cut)$Global$optimal.cutoff$cutoff[1]
      
      df.temp.outer <- df.risk.pred |> 
        mutate(risk.pred = if_else(pred.prob <= opt.cut.value, 0, 1))
      
      for (group in groups) {
        
        if (group == "All") {
          cm = confusionMatrix(table(predicted = df.temp.outer$risk.pred,
                                     reference = df.temp.outer$risk),
                               positive = "1")
          
          df.out <- extract_metrics(cm) |> 
            mutate(grade = grade,
                   model = model,
                   predictors = predictors,
                   group = group,
                   method = method,
                   opt.cut = opt.cut.value
            )
          
          df.eval.es <- df.eval.es |> 
            rbind(df.out)
          
        } else if (group %in% c("EO", "EL")) {
          
          df.temp.inner <- df.temp.outer |> 
            filter(el == group)
          
          n.crit = df.temp.inner %>% nrow()
          if (n.crit < 10) next
          
          df.temp.inner$risk.pred <- factor(df.temp.inner$risk.pred, levels = c(0, 1))
          df.temp.inner$risk <- factor(df.temp.inner$risk, levels = c(0, 1))
          
          cm = confusionMatrix(table(predicted = df.temp.inner$risk.pred,
                                     reference = df.temp.inner$risk),
                               positive = "1")
          
          df.out <- extract_metrics(cm) |> 
            mutate(grade = grade,
                   model = model,
                   predictors = predictors,
                   group = group,
                   method = method,
                   opt.cut = opt.cut.value
            )
          
          df.eval.es <- df.eval.es |> 
            rbind(df.out)
        }
      }
      
      # save plots and prediction outputs for later use
      # out = plot_roc_curves_within_model(df.risk.pred)
      # roc.curves[[model]] <- out[[1]] + labs(title = model,
      #                                        subtitle = paste0("risk ~ ", models[[model]]))
      # proc.curves[[model]] <- out[[2]] + labs(title = model,
      #                                         subtitle = paste0("risk ~ ", models[[model]]))
      pred.dfs.es[[model]] <- df.risk.pred
      # aucs[[model]] <- mean(out[[1]]$data$AUROC)
    }
  }
}

# re-arrange columns
df.eval.es <- df.eval.es |> 
  select(c(grade, group, model, predictors, method, opt.cut), everything())

# deal with lacking data for EO and EL groups
df.eval.es <- df.eval.es %>% 
  rbind(df.eval.es %>% 
          mutate(group = "EL"
                 ) %>% 
          mutate(across(-c(grade, group, model, predictors, method, opt.cut), ~ NA))
        ) %>% 
  rbind(df.eval.es %>% 
          mutate(group = "EO"
                 ) %>% 
          mutate(across(-c(grade, group, model, predictors, method, opt.cut), ~ NA))
        )
  
df.eval.es.wide.2425 <- df.eval.es |> 
  filter(group == "All") %>% 
  pivot_wider(names_from = group, values_from = Accuracy:Balanced.Accuracy) |> 
  select(c(grade, model, predictors, method, opt.cut,
           contains("_All"),
           contains("_EL"),
           contains("_EO")
  )
  )
```

```{r eval=FALSE}
#| label: tbl-model-eval-summary-ay2425
#| tbl-cap: "Summary of Best English and Spanish Prediction Models (AY 2024/25).\\newline"

df.eval.en.wide.2425 |> 
  filter(method == "Youden") |> 
  mutate(grade = factor(grade, levels = c("K", "G1", "G2")),
         model = str_sub(model, 3, 100)
         ) |>
  arrange(grade, model) |> 
  unique() |> 
  select(c(grade,
           model,
           # method,
           contains("Sensitivity"),
           contains("Specificity")
           # contains("Balanced.Accuracy")
           )
         ) |> 
  # mutate(across(where(is.numeric), color_format)) |> 
  left_join(
    df.eval.es.wide.2425 |> 
  filter(method == "Youden") |> 
  mutate(grade = factor(grade, levels = c("K", "G1", "G2")),
         model = str_sub(model, 3, 100)
         ) |>
  arrange(grade, model) |> 
  unique() |> 
  select(c(grade,
           model,
           # method,
           Sensitivity_es = Sensitivity_All,
           Specificity_es = Specificity_All
           # contains("Balanced.Accuracy")
           )
         ) 
  ) |> 
  # mutate(across(where(is.numeric), color_format)) |> 
  kable(format = "latex",
        escape = FALSE,
        booktabs = TRUE,
        digits = 3,
        align = c("l", "l", "c", "c", "c", "c", "c", "c", "c", "c"),
        col.names = c("Grade",
                      "Model",
                      # "Method",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "All"
                      ),
         linesep = c(rep("", 3), "\\addlinespace", rep("", 2), "\\addlinespace", rep("", 5))
        ) |> 
  kable_styling(
    full_width = FALSE,
    latex_options = c("scale_down")
  ) |> 
  add_header_above(c(" " = 2, "Sensitivity" = 3, "Specificity" = 3, "Sensitivity", "Specificity")) |> 
  add_header_above(c(" " = 2, "English" = 6, "Spanish" = 2))
```

```{r}
#| label: tbl-model-eval-summary-ay2425-new
#| tbl-cap: "Summary of Best English and Spanish Prediction Models (AY 2024/25).\\newline"

df.eval.en.wide.2425 |> 
  filter(method == "Youden") |> 
  mutate(grade = factor(grade, levels = c("K", "G1", "G2")),
         model = str_sub(model, 3, 100)
  ) |>
  arrange(grade, model) |> 
  unique() |> 
  select(c(grade,
           model,
           # method,
           contains("Sensitivity"),
           contains("Specificity"),
           contains("Accuracy_"),
           contains("Balanced.Accuracy")
  )
  ) |> 
  # mutate(across(where(is.numeric), color_format)) |> 
  left_join(
    df.eval.es.wide.2425 |> 
      filter(method == "Youden") |> 
      mutate(grade = factor(grade, levels = c("K", "G1", "G2")),
             model = str_sub(model, 3, 100)
      ) |>
      arrange(grade, model) |> 
      unique() |> 
      select(c(grade,
               model,
               # method,
               Sensitivity_es = Sensitivity_All,
               Specificity_es = Specificity_All,
               Accuracy_es = Accuracy_All,
               Balanced.Accuracy_es = Balanced.Accuracy_All
      )
      ) 
  ) |> 
  mutate(across(where(is.numeric), color_format)) |>
  kable(format = "latex",
        escape = FALSE,
        booktabs = TRUE,
        digits = 3,
        align = c("l", "l", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c"),
        col.names = c("Grade",
                      "Model",
                      # "Method",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "All",
                      "All",
                      "All"
        ),
        linesep = c(rep("", 3), "\\addlinespace", rep("", 2), "\\addlinespace", rep("", 5))
  ) |> 
  kable_styling(
    full_width = FALSE,
    latex_options = c("scale_down")
  ) |> 
  add_header_above(c(" " = 2, "Sensitivity" = 3, "Specificity" = 3, "Accuracy" = 3, "Balanced Acc." = 3, "Sens.", "Spec.", "Acc.", "BA")) |> 
  add_header_above(c(" " = 2, "English" = 12, "Spanish" = 4)) %>% 
  add_footnote(label = "Note. green: >= .8; black: >= .7; yellow: >= .6; red otherwise", notation = "none")
```

\elandscape
\FloatBarrier
# PART III - Combined Analysis of 2023/24 and 2024/25 Data

## Sample

Throughout, I only included tasks taken by at least 50 students per language per grade, so as to not distort the task selection analyses.

```{r ays2325}
df.2325 <- df %>% 
  filter(ay %in% c("AY 23/24", "AY 24/25"))
N <- length(unique(df.2325$student_id))
n.school <- length(unique(df.2325$school))
n.district <- length(unique(df.2325$district))
```

- 4091 observations from `r N` unique students (as some took part in the study in both years)
- `r n.school` schools
- `r n.district` districts

\blandscape
```{r}
#| label: tbl-ays2325-sample
#| tbl-cap: "Demographic Characteristics of the Combined AY 23/24 and 24/25 Sample (N = 3,533) by Grade and Screening Language \\newline"
df.2325 %>% 
  select(c(student_id, grade, lang, gender, race, ethnicity, el, ever_disability, home_lang)) %>%
  unique() %>% 
  mutate(lang = case_when(lang == "en-US" ~ "English",
                          lang == "es-US" ~ "Spanish",
  )) %>% 
  select(-student_id) %>% 
  tbl_strata(strata = lang,
             .tbl_fun =
               ~ .x |>
               tbl_summary(by = grade,
                           label = c(gender ~ "Gender",
                                     race ~ "Race",
                                     ethnicity ~ "Ethnicity",
                                     el ~ "ELPD",
                                     ever_disability  ~ "Ever IEP/504",
                                     home_lang ~ "Home Language"
                           )
               ) %>% 
               modify_footnote(everything() ~ "Test")
  )
```
\elandscape
\FloatBarrier

```{r dfs-ays2325}
df.2325.en <- df.2325 %>% 
  filter(lang == "en-US",
         !is.na(outcomescore_en)
  ) %>% 
  mutate(model_lang = "English",
         task_lang = "English"
  ) %>% 
  rename(risk = risk_en,
         risk_ext = risk_ext_en,
         outcomescore = outcomescore_en,
         outcomepercentile = outcomepercentile_en
  ) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0
  )
  ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  filter(!is.na(risk))

df.2325.es <- df.2325 %>% 
  filter(lang == "es-US",
         !is.na(outcomescore_es)
  ) %>% 
  mutate(model_lang = "Spanish",
         task_lang = "Spanish") %>% 
  rename(risk = risk_es,
         risk_ext = risk_ext_es,
         outcomescore = outcomescore_es,
         outcomepercentile = outcomepercentile_es
  ) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0
  )
  ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  filter(!is.na(risk))
```

## Descriptives

### Distributions of English Multitudes Tasks

```{r}
#| label: fig-distributions-en-ays2325
#| fig-cap: "Distributions of English Multitudes Tasks by Grade (Fall 2023 and 2024 Combined)."
#| fig-height: 5
plots <- list()
df.2325.en$grade <- factor(df.2325.en$grade, levels = c("K", "G1", "G2"))

for (t in unique(df.2325.en$task)) {
  plot <- df.2325.en %>% 
    filter(task == t) %>% 
    ggplot(aes(x = score, group = grade, fill = factor(grade, levels = c("K", "G1", "G2")))) +
    geom_density(alpha = .5) +
    theme(legend.position = "bottom") +
    scale_fill_manual(values = palette.grades, drop = FALSE) +
    labs(x = "Score",
         y = " ",
         title = paste(t),
         fill = "Grade") +
    theme(axis.text.y= element_blank(),
          axis.title.x = element_blank())
  plots[[t]] <- plot
}

ggarrange(plotlist = plots,
          common.legend = TRUE,
          legend = "bottom"
)
```

\newpage
### Distributions of Spanish Multitudes Tasks
\FloatBarrier

```{r}
#| label: fig-distributions-es-ays2325
#| fig-cap: "Distributions of Spanish Multitudes Tasks by Grade (Fall 2023 and 2025 Combined)."
#| fig-height: 5

plots <- list()
for (t in unique(df.2325.es$task)) {
  plot <- df.2325.es %>% 
    mutate(grade = factor(grade, levels = c("K", "G1", "G2"))) %>% 
    filter(task == t) %>% 
    ggplot(aes(x = score, group = grade, fill = factor(grade, levels = c("K", "G1", "G2")))) +
    geom_density(alpha = .5) +
    theme(legend.position = "bottom") +
    scale_fill_manual(values = palette.grades, drop = FALSE) +
    labs(x = "Score",
         y = " ",
         title = paste(t),
         fill = "Grade") +
    theme(axis.text.y= element_blank(),
          axis.title.x = element_blank())
  plots[[t]] <- plot
}

ggarrange(plotlist = plots,
          common.legend = TRUE,
          legend = "bottom"
)
```

\newpage
### Distributions of Outcome Measures

```{r df-outcomes-ays2325}
df.2325.outcomes <- df.2325 |> 
  filter(!is.na(outcomescore_en)) %>% 
  mutate(risk = risk_en,
         risk_ext = risk_ext_en,
         outcomescore = outcomescore_en,
         model_lang = "English") %>% 
  rbind(
    df.2325 |> 
      filter(!is.na(outcomescore_es)) %>% 
      mutate(risk = risk_es,
             risk_ext = risk_ext_es,
             outcomescore = outcomescore_es,
             model_lang = "Spanish")
  )
```

```{r fig.height=2.5}
#| label: fig-outcomes-en-ays2325
#| fig-cap: "Distribution of Woodcock-Johnson/-Muñoz Basic Reading Skills Cluster (for Kindergarten) Broad Reading Cluster (for Grades 1 and 2) by Grade and Language with Struggling Readers (</= 20th Percentile) Highlighted (Spring 2024 and 2025 Combined)"

df.2325.outcomes %>% 
  ggplot(aes(x = outcomescore)) +
  geom_vline(xintercept = 70, colour = "gray", linetype = 2) +
  geom_vline(xintercept = 85, colour = "gray", linetype = 2) +
  geom_vline(xintercept = 100, colour = "darkgray", linetype = 1) +
  geom_vline(xintercept = 115, colour = "gray", linetype = 2) +
  geom_vline(xintercept = 130, colour = "gray", linetype = 2) +
  geom_histogram(#fill = "darkgreen",
    aes(group = risk, fill = risk),
    binwidth = 1
  ) +
  facet_grid(cols = vars(grade),
             rows = vars(model_lang),
             scales = "free"
  ) +
  scale_x_continuous(breaks = c(70, 85, 100, 115, 130), labels = c("70\n(-2SD)", "85\n", "100\n(M)", "115", "130\n(+2SD)")) +
  labs(x = "Standard Score",
       y = "No. of Students",
       fill = "Defined as") +
  theme(legend.position = "bottom") +
  scale_fill_manual(values = palette3)
```

```{r}
#| label: tbl-outcomes-en-ays2325
#| tbl-cap: "Comparison of Proportions of Struggling Readers (</= 20th Percentile) in the Study Sample Based on Overall Multitudes Sample and on Published Woodcock-Johnson/Muñoz Norms (Spring 2024 and 2025 Combined)."

df.2325.outcomes |> 
  select(c(student_id, model_lang,grade, risk_ext, risk)) |>
  unique() |> 
  select(-student_id) |> 
  tbl_strata(strata = model_lang,
             .tbl_fun =
               ~ .x %>% tbl_summary(by = c(grade),
                                    label = c(risk ~ "Sample-based",
                                              risk_ext ~ "Norm-based"
                                    )
               )
  ) |> 
  modify_footnote(everything() ~ NA) |> 
  modify_header(label ~ "**Reference**") |>
  as_kable_extra(booktabs = TRUE,
                 linesep = c("", "", "\\addlinespace")
  ) |> 
  kable_styling(latex_options = c("scale_down"))
```

\FloatBarrier
\newpage

### Correlations

```{r correlation-dfs-ays2325}

df.corr <- df %>% 
  filter(ay %in% c("AY 23/24", "AY 24/25")
         # !is.na(outcomescore_en)
  ) %>%
  select(c(student_id, grade, task, el, score)) %>% 
  rbind(
    df %>% 
      filter(ay %in% c("AY 23/24", "AY 24/25"),
             !is.na(outcomescore_en)
      ) %>%
      mutate(task = case_when(grade == "K" & !is.na(outcomescore_en) ~ "wcj_c_basicreadingskills",
                              grade == "G1" & !is.na(outcomescore_en) ~ "wcj_c_broadreading",
                              grade == "G2" & !is.na(outcomescore_en) ~ "wcj_c_broadreading",
      ),
      score = outcomescore_en
      ) %>% 
      select(c(student_id, grade, task, el, score)) %>% 
      unique()
  ) %>% 
  rbind(
    df %>% 
      filter(ay %in% c("AY 23/24", "AY 24/25"),
             !is.na(outcomescore_es)
      ) %>%
      mutate(task = case_when(grade == "K" & !is.na(outcomescore_es) ~ "wcm_c_basicreadingskills",
                              grade == "G1" & !is.na(outcomescore_es) ~ "wcm_c_broadreading",
                              grade == "G2" & !is.na(outcomescore_es) ~ "wcm_c_broadreading",
      ),
      score = outcomescore_es
      ) %>% 
      select(c(student_id, grade, task, el, score)) %>% 
      unique()
  )
```

\FloatBarrier
#### Kindergarten - English
\FloatBarrier
```{r}
#| label: fig-corrs-k-en-ays2325
#| fig-cap: "Correlations Between English Multitudes Tasks and English Reading Outcome Scores (Kindergarten; AYs 2023/24 and 2024/25 Combined)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcj", task) | grepl("_e", task)), "K")
```

\FloatBarrier
\newpage
#### Kindergarten - Spanish
\FloatBarrier
```{r}
#| label: fig-corrs-k-es-ays2325
#| fig-cap: "Correlations Between Spanish Multitudes Tasks and Spanish Reading Outcome Scores (Kindergarten; AYs 2023/24 and 2024/25 Combined)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcm", task) | grepl("_s", task)), "K")
```

\FloatBarrier
\newpage
#### Grade 1 - English
\FloatBarrier
```{r}
#| label: fig-corrs-1-en-ays2325
#| fig-cap: "Correlations Between English Multitudes Tasks and English Reading Outcome Scores (Grade 1; AYs 2023/24 and 2024/25 Combined)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcj", task) | grepl("_e", task)), "G1")
```

\FloatBarrier
\newpage
#### Grade 1 - Spanish
\FloatBarrier
```{r}
#| label: fig-corrs-1-es-ays2325
#| fig-cap: "Correlations Between Spanish Multitudes Tasks and Spanish Reading Outcome Scores (Grade 1; AYs 2023/24 and 2024/25 Combined)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcm", task) | grepl("_s", task)), "G1")
```


\FloatBarrier
\newpage
#### Grade 2 - English
\FloatBarrier
```{r}
#| label: fig-corrs-2-en-ays2325
#| fig-cap: "Correlations Between English Multitudes Tasks and English Reading Outcome Scores (Grade 2; AYs 2023/24 and 2024/25 Combined)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcj", task) | grepl("_e", task)), "G2")
```

\FloatBarrier
\newpage
#### Grade 2 - Spanish
\FloatBarrier
```{r}
#| label: fig-corrs-2-es-ays2325
#| fig-cap: "Correlations Between Spanish Multitudes Tasks and Spanish Reading Outcome Scores (Grade 2; AYs 2023/24 and 2024/25 Combined)."
#| fig-height: 7
#| fig-width: 8

plot_corrplot(df.corr %>% filter(grepl("wcm", task) | grepl("_s", task)), "G2")
```

\FloatBarrier
\newpage
## Task Selection

```{r task-selection-dfs-ays2325}
df.temp.en <- df %>% 
  filter(ay %in% c("AY 23/24", "AY 24/25"),
         lang == "en-US",
         !is.na(outcomescore_en)
  ) %>% 
  mutate(model_lang = "English",
         task_lang = "English"
  ) %>% 
  rename(risk = risk_en,
         risk_ext = risk_ext_en,
         outcomescore = outcomescore_en,
         outcomepercentile = outcomepercentile_en
  ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0,
  )
  )

df.temp.es <- df %>% 
  filter(ay %in% c("AY 23/24", "AY 24/25"),
         lang == "es-US",
         !is.na(outcomescore_es)
  ) %>% 
  mutate(model_lang = "Spanish",
         task_lang = "Spanish"
  ) %>% 
  rename(risk = risk_es,
         risk_ext = risk_ext_es,
         outcomescore = outcomescore_es,
         outcomepercentile = outcomepercentile_es
  ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0,
  )
  )

df.temp.en.cl <- df %>% 
  filter(ay %in% c("AY 23/24", "AY 24/25"),
         !is.na(outcomescore_en),
         !is.na(outcomescore_es),
  ) %>% 
  rename(risk = risk_en,
         risk_ext = risk_ext_en,
         outcomescore = outcomescore_en,
         outcomepercentile = outcomepercentile_en
  ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0,
  )
  )

df.temp.es.cl <- df %>% 
  filter(ay %in% c("AY 23/24", "AY 24/25"),
         !is.na(outcomescore_en),
         !is.na(outcomescore_es),
  ) %>% 
  rename(risk = risk_es,
         risk_ext = risk_ext_es,
         outcomescore = outcomescore_es,
         outcomepercentile = outcomepercentile_es
  ) %>% 
  select(-c(contains("_en"), contains("_es"))) %>% 
  mutate(risk = case_when(risk == "Struggling" ~ 1,
                          risk == "Not struggling" ~ 0,
  )
  )
```

```{r boruta-k-en-ays2325, cache=TRUE}
boruta.k.en.all <- boruta_task_selection(df.temp.en, "K", "English")
boruta.k.en.el <- boruta_task_selection(df.temp.en |> filter(el == "EL"), "K", "English")
boruta.k.en.eo <- boruta_task_selection(df.temp.en |> filter(el == "EO"), "K", "English")

agg.results.all <- boruta.k.en.all$aggregated_results |> 
  mutate(group = "All") |> 
  rbind(boruta.k.en.el$aggregated_results |> mutate(group = "EL")) |> 
rbind(boruta.k.en.eo$aggregated_results |> mutate(group = "EO"))

plot.boruta.k.en <- plot_boruta(agg.results.all)
```

```{r boruta-k-es-ays2325, cache=TRUE}
boruta.k.es.all <- boruta_task_selection(df.temp.es, "K", "Spanish")

agg.results.all <- boruta.k.es.all$aggregated_results |> 
  mutate(group = "All")

plot.boruta.k.es <- plot_boruta(agg.results.all)
```

```{r boruta-1-en-ays2325, cache=TRUE}
boruta.1.en.all <- boruta_task_selection(df.temp.en, "G1", "English")
boruta.1.en.el <- boruta_task_selection(df.temp.en |> filter(el == "EL"), "G1", "English")
boruta.1.en.eo <- boruta_task_selection(df.temp.en |> filter(el == "EO"), "G1", "English")

agg.results.all <- boruta.1.en.all$aggregated_results |> 
  mutate(group = "All") |> 
  rbind(boruta.1.en.el$aggregated_results |> mutate(group = "EL")) |> 
  rbind(boruta.1.en.eo$aggregated_results |> mutate(group = "EO"))

plot.boruta.1.en <- plot_boruta(agg.results.all)
```

```{r boruta-1-es-ays2325, cache=TRUE}
boruta.1.es.all <- boruta_task_selection(df.temp.es, "G1", "Spanish")

agg.results.all <- boruta.1.es.all$aggregated_results |> 
  mutate(group = "All")

plot.boruta.1.es <- plot_boruta(agg.results.all)
```

```{r boruta-2-en-ays2325, cache=TRUE}
boruta.2.en.all <- boruta_task_selection(df.temp.en, "G2", "English")
boruta.2.en.el <- boruta_task_selection(df.temp.en |> filter(el == "EL"), "G2", "English")
boruta.2.en.eo <- boruta_task_selection(df.temp.en |> filter(el == "EO"), "G2", "English")

agg.results.all <- boruta.2.en.all$aggregated_results |> 
  mutate(group = "All") |> 
  rbind(boruta.2.en.el$aggregated_results |> mutate(group = "EL")) |>
  rbind(boruta.2.en.eo$aggregated_results |> mutate(group = "EO"))

plot.boruta.2.en <- plot_boruta(agg.results.all)
```

```{r boruta-2-es-ays2325, cache=TRUE}
boruta.2.es.all <- boruta_task_selection(df.temp.es, "G2", "Spanish")
# boruta.2.es.el <- boruta_task_selection(df |> filter(el == "EL"), "Grade 2", "Spanish")
# boruta.2.es.eo <- boruta_task_selection(df |> filter(el == "EO"), "Grade 2", "Spanish")

agg.results.all <- boruta.2.es.all$aggregated_results |> 
  mutate(group = "All")

plot.boruta.2.es <- plot_boruta(agg.results.all)
```

\FloatBarrier
### English-to-English (English to English)

```{r}
#| label: fig-boruta-en-ays2325
#| fig-cap: "Mean Task Importance Obtained From Boruta Algorithm for English-to-English Predictions, with Results Disaggregated by English Proficiency Designation (AYs 2023/24 and 2024/25 Combined)."
#| fig-height: 7
#| fig-width: 8
ggarrange(plotlist = list(plot.boruta.k.en, plot.boruta.1.en, plot.boruta.2.en),
          common.legend = TRUE,
          legend = "bottom",
          nrow = 3, ncol = 1,
          labels = c("K", "G1", "G2")
)
```

\newpage
\FloatBarrier
### Spanish-to-Spanish (Spanish to Spanish)

```{r}
#| label: fig-boruta-es-ays2325
#| fig-cap: "Mean Task Importance Obtained From Boruta Algorithm for Spanish-to-Spanish Predictions (AYs 2023/24 and 2024/25 Combined)."
#| fig-height: 7
#| fig-width: 8
#| 
ggarrange(plotlist = list(plot.boruta.k.es, plot.boruta.1.es, plot.boruta.2.es),
          common.legend = TRUE,
          legend = "bottom",
          nrow = 3, ncol = 1,
          labels = c("K", "G1", "G2"
          )
)
```

\FloatBarrier
\newpage

## Models Evaluations - ROC Curves

### English-to-English - Kindergarten
\FloatBarrier

```{r model-k-en-lnf-ays2325}

modelname <- "0. LNF only"
results.k.en.lnf = build_prediction_model(df.2325.en,
                                          grd = "K",
                                          lg = "English",
                                          mdl = "lnf_e"
)

df.results.k.en.lnf <- results.k.en.lnf[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.en.lnf <- results.k.en.lnf[[2]]

# create and save plots
plots.k.en.lnf <- plot_roc_curves_within_model(df.results.k.en.lnf, disaggregated = FALSE)
```

```{r model-k-en-existing-ays2325}

modelname <- "1. LNF, EVO, RANO, ELIR"
results.k.en.existing = build_prediction_model(df.2325.en,
                                               grd = "K",
                                               lg = "English",
                                               mdl = "lnf_e + evo_e + rano_e + elir_e"
)

df.results.k.en.existing <- results.k.en.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.en.existing <- results.k.en.existing[[2]]

# create and save plots
plots.k.en.existing <- plot_roc_curves_within_model(df.results.k.en.existing, disaggregated = FALSE)
```

```{r model-k-en-model2-ays2325}

modelname <- "2. LNF, EVO, RANO"
results.k.en.model2 = build_prediction_model(df.2325.en,
                                             grd = "K",
                                             lg = "English",
                                             mdl = "lnf_e + evo_e + rano_e"
)

df.results.k.en.model2 <- results.k.en.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.en.model2 <- results.k.en.model2[[2]]

# create and save plots
plots.k.en.model2 <- plot_roc_curves_within_model(df.results.k.en.model2, disaggregated = FALSE)
```

```{r model-k-en-model3-ays2325}

modelname <- "3. LNF, RANO, ELIR"
results.k.en.model3 = build_prediction_model(df.2325.en,
                                             grd = "K",
                                             lg = "English",
                                             mdl = "lnf_e + elir_e + rano_e"
)

df.results.k.en.model3 <- results.k.en.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.en.model3 <- results.k.en.model3[[2]]

# create and save plots
plots.k.en.model3 <- plot_roc_curves_within_model(df.results.k.en.model3, disaggregated = FALSE)
```

```{r model-k-en-srt-ays2325}

modelname <- "3. SRT only"
results.k.en.srt = build_prediction_model(df.2325.en,
                                          grd = "K",
                                          lg = "English",
                                          mdl = "srt_e"
)

df.results.k.en.srt <- results.k.en.srt[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.en.srt <- results.k.en.srt[[2]]

# create and save plots
plots.k.en.srt <- plot_roc_curves_within_model(df.results.k.en.srt, disaggregated = FALSE)
```

```{r model-k-en-new-ays2325}

modelname <- "4. SRT, LNF, EVO, RANL"
results.k.en.new = build_prediction_model(df.2325.en,
                                          grd = "K",
                                          lg = "English",
                                          mdl = "srt_e + lnf_e + evo_e + ranl_e"
)

df.results.k.en.new <- results.k.en.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.en.new <- results.k.en.new[[2]]

# create and save plots
plots.k.en.new <- plot_roc_curves_within_model(df.results.k.en.new, disaggregated = FALSE)
```

```{r}
#| label: fig-roc-k-en-ays2325
#| fig-cap: "Receiver-operator Characteristic Curves For English-to-English Kindergarten Models (AYs 2023/24 and 2024/25 Combined)."
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.k.en.lnf,
  df.results.k.en.existing,
  df.results.k.en.model2,
  df.results.k.en.model3
  # df.results.k.en.srt,
  # df.results.k.en.new
), group = "All", output = "roc")
# plot.eo <- plot_roc_curves_across_models(list(
#   df.results.k.en.lnf,
#   df.results.k.en.existing,
#   df.results.k.en.model2,
#   df.results.k.en.model3
#   # df.results.k.en.srt,
#   # df.results.k.en.new
#   ), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.k.en.lnf,
  df.results.k.en.existing,
  df.results.k.en.model2,
  df.results.k.en.model3
  # df.results.k.en.srt,
  # df.results.k.en.new
), group = "EL", output = "roc")

plots.roc.k <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                                         # plot.eo + labs(title = " "),
                                         plot.el + labs(title = " ")
),
nrow = 2,
labels = c("K - All Students", "K - English Learners")
)
plots.roc.k
```
\FloatBarrier
\newpage
### English-to-English - Grade 1
\FloatBarrier

```{r model-1-en-wre-ays2325}

modelname <- "0. WRE only"
results.1.en.wre = build_prediction_model(df.2325.en,
                                          grd = "G1",
                                          lg = "English",
                                          mdl = "wre_e"
)

df.results.1.en.wre <- results.1.en.wre[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.en.wre <- results.1.en.wre[[2]]

# create and save plots
plots.1.en.wre <- plot_roc_curves_within_model(df.results.1.en.wre, disaggregated = FALSE)
```

```{r model-1-en-existing-ays2325}

modelname <- "1. WRE, EVO, RANO, LSF"
results.1.en.existing = build_prediction_model(df.2325.en,
                                               grd = "G1",
                                               lg = "English",
                                               mdl = "wre_e + evo_e + rano_e + lsf_e"
)

df.results.1.en.existing <- results.1.en.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.en.existing <- results.1.en.existing[[2]]

# create and save plots
plots.1.en.existing <- plot_roc_curves_within_model(df.results.1.en.existing, disaggregated = FALSE)
```

```{r model-1-en-model2-ays2325}

modelname <- "2. WRE, EVO, RANO, LSF"
results.1.en.model2 = build_prediction_model(df.2325.en,
                                             grd = "G1",
                                             lg = "English",
                                             mdl = "wre_e + evo_e + rano_e + lsf_e"
)

df.results.1.en.model2 <- results.1.en.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.en.model2 <- results.1.en.model2[[2]]

# create and save plots
plots.1.en.model2 <- plot_roc_curves_within_model(df.results.1.en.model2, disaggregated = FALSE)
```

```{r model-1-en-model3-ays2325}

modelname <- "2. WRE, RANO, LSF"
results.1.en.model3 = build_prediction_model(df.2325.en,
                                             grd = "G1",
                                             lg = "English",
                                             mdl = "wre_e + rano_e + lsf_e"
)

df.results.1.en.model3 <- results.1.en.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.en.model3 <- results.1.en.model3[[2]]

# create and save plots
plots.1.en.model3 <- plot_roc_curves_within_model(df.results.1.en.model3, disaggregated = FALSE)
```


```{r model-1-en-new-ays2325}

modelname <- "3. WRE, LSF, RANL"
results.1.en.new = build_prediction_model(df.2325.en,
                                          grd = "G1",
                                          lg = "English",
                                          mdl = "wre_e + lsf_e + ranl_e"
)

df.results.1.en.new <- results.1.en.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.en.new <- results.1.en.new[[2]]

# create and save plots
plots.1.en.new <- plot_roc_curves_within_model(df.results.1.en.new, disaggregated = FALSE)
```

```{r }
#| label: fig-roc-1-en-ays2325
#| fig-cap: "Receiver-operator Characteristic Curves For English-to-English Grade 1 Models (AYs 2023/24 and 2024/25 Combined)."
#| fig.height: 3
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.1.en.wre,
  df.results.1.en.existing,
  # df.results.1.en.model2,
  df.results.1.en.model3
  # df.results.1.en.new
), group = "All", output = "roc")
plot.eo <- plot_roc_curves_across_models(list(
  df.results.1.en.wre,
  df.results.1.en.existing,
  # df.results.1.en.model2,
  df.results.1.en.model3
  # df.results.1.en.new
), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.1.en.wre,
  df.results.1.en.existing,
  # df.results.1.en.model2,
  df.results.1.en.model3
  # df.results.1.en.new
),  group = "EL", output = "roc")

plots.roc.1 <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                                         # plot.eo + labs(title = " "),
                                         plot.el + labs(title = " ")
),
nrow = 2,
labels = c("G1 - All Students", "G1 - English Learners")
)
plots.roc.1
```
\newpage
\FloatBarrier
### English-to-English - Grade 2
\FloatBarrier

```{r model-2-en-wre-ays2325}

modelname <- "0. WRE only"
results.2.en.wre = build_prediction_model(df.2325.en,
                                          grd = "G2",
                                          lg = "English",
                                          mdl = "wre_e"
)

df.results.2.en.wre <- results.2.en.wre[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.en.wre <- results.2.en.wre[[2]]

# create and save plots
plots.2.en.wre <- plot_roc_curves_within_model(df.results.2.en.wre, disaggregated = FALSE)
```

```{r model-2-en-existing-ays2325}

modelname <- "1. WRE, EVO, RANL"
results.2.en.existing = build_prediction_model(df.2325.en,
                                               grd = "G2",
                                               lg = "English",
                                               mdl = "wre_e + evo_e + ranl_e"
)

df.results.2.en.existing <- results.2.en.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.en.existing <- results.2.en.existing[[2]]

# create and save plots
plots.2.en.existing <- plot_roc_curves_within_model(df.results.2.en.existing, disaggregated = FALSE)
```

```{r model-2-en-model2-ays2325}

modelname <- "2. WRE, EVO, RANL, SPE"
results.2.en.model2 = build_prediction_model(df.2325.en,
                                             grd = "G2",
                                             lg = "English",
                                             mdl = "wre_e + evo_e + ranl_e + spe_e"
)

df.results.2.en.model2 <- results.2.en.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.en.model2 <- results.2.en.model2[[2]]

# create and save plots
plots.2.en.model2 <- plot_roc_curves_within_model(df.results.2.en.model2, disaggregated = FALSE)
```

```{r model-2-en-model3-ays2325}

modelname <- "3. WRE, RANL, SPE"
results.2.en.model3 = build_prediction_model(df.2325.en,
                                             grd = "G2",
                                             lg = "English",
                                             mdl = "wre_e + ranl_e + spe_e"
)

df.results.2.en.model3 <- results.2.en.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.en.model3 <- results.2.en.model3[[2]]

# create and save plots
plots.2.en.model3 <- plot_roc_curves_within_model(df.results.2.en.model3, disaggregated = FALSE)
```

```{r model-2-en-new-ays2325}

modelname <- "3. WRE, LSF, RANL"
results.2.en.new = build_prediction_model(df.2325.en,
                                          grd = "G2",
                                          lg = "English",
                                          mdl = "wre_e + lsf_e + ranl_e"
)

df.results.2.en.new <- results.2.en.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.en.new <- results.2.en.new[[2]]

# create and save plots
plots.2.en.new <- plot_roc_curves_within_model(df.results.2.en.new, disaggregated = FALSE)
```


```{r}
#| label: fig-roc-2-en-ays2325
#| fig-cap: "Receiver-operator Characteristic Curves For English-to-English Grade 2 Models (AYs 2023/24 and 2024/25 Combined)."
#| fig.height: 3
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.2.en.wre,
  df.results.2.en.existing,
  df.results.2.en.model2,
  df.results.2.en.model3
  # df.results.2.en.new
), group = "All", output = "roc")
plot.eo <- plot_roc_curves_across_models(list(
  df.results.2.en.wre,
  df.results.2.en.existing,
  df.results.2.en.model2,
  df.results.2.en.model3
  # df.results.2.en.new
), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.2.en.wre,
  df.results.2.en.existing,
  df.results.2.en.model2,
  df.results.2.en.model3
  # df.results.2.en.new
), group = "EL", output = "roc")

plots.roc.2 <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                                         # plot.eo + labs(title = " "),
                                         plot.el + labs(title = " ")
),
nrow = 2,
labels = c("G2 - All Students", "G2 - English Learners")
)
plots.roc.2
```
\newpage
\FloatBarrier
### Spanish-to-Spanish - Kindergarten
\FloatBarrier

```{r model-k-es-lnf-ays2325}

modelname <- "0. LNF only"
results.k.es.lnf = build_prediction_model(df.2325.es,
                                          grd = "K",
                                          lg = "Spanish",
                                          mdl = "lnf_s"
)

df.results.k.es.lnf <- results.k.es.lnf[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.lnf <- results.k.es.lnf[[2]]

# create and save plots
plots.k.es.lnf <- plot_roc_curves_within_model(df.results.k.es.lnf, disaggregated = FALSE)
```

```{r model-k-es-existing-ays2325}

modelname <- "1. LNF, EVO, RANO, ELIR"
results.k.es.existing = build_prediction_model(df.2325.es,
                                               grd = "K",
                                               lg = "Spanish",
                                               mdl = "lnf_s + evo_s + rano_s + elir_s"
)

df.results.k.es.existing <- results.k.es.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.existing <- results.k.es.existing[[2]]

# create and save plots
plots.k.es.existing <- plot_roc_curves_within_model(df.results.k.es.existing, disaggregated = FALSE)
```


```{r model-k-es-model2-ays2325}

modelname <- "2. LNF, EVO, RANO"
results.k.es.model2 = build_prediction_model(df.2325.es,
                                             grd = "K",
                                             lg = "Spanish",
                                             mdl = "lnf_s + evo_s + rano_s"
)

df.results.k.es.model2 <- results.k.es.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.model2 <- results.k.es.model2[[2]]

# create and save plots
plots.k.es.model2 <- plot_roc_curves_within_model(df.results.k.es.model2, disaggregated = FALSE)
```

```{r model-k-es-model3-ays2325}

modelname <- "3. LNF, RANO, ELIR"
results.k.es.model3 = build_prediction_model(df.2325.es,
                                             grd = "K",
                                             lg = "Spanish",
                                             mdl = "lnf_s + elir_s + rano_s"
)

df.results.k.es.model3 <- results.k.es.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.model3 <- results.k.es.model3[[2]]

# create and save plots
plots.k.es.model3 <- plot_roc_curves_within_model(df.results.k.es.model3, disaggregated = FALSE)
```


```{r model-k-es-srt-ays2325}

modelname <- "3. SRT only"
results.k.es.srt = build_prediction_model(df.2325.es,
                                          grd = "K",
                                          lg = "Spanish",
                                          mdl = "srt_s"
)

df.results.k.es.srt <- results.k.es.srt[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.srt <- results.k.es.srt[[2]]

# create and save plots
plots.k.es.srt <- plot_roc_curves_within_model(df.results.k.es.srt, disaggregated = FALSE)
```

```{r model-k-es-new-ays2325}

modelname <- "4. SRT, LNF, EVO, RANL"
results.k.es.new = build_prediction_model(df.2325.es,
                                          grd = "K",
                                          lg = "Spanish",
                                          mdl = "srt_s + lnf_s + evo_s + ranl_s"
)

df.results.k.es.new <- results.k.es.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.k.es.new <- results.k.es.new[[2]]

# create and save plots
plots.k.es.new <- plot_roc_curves_within_model(df.results.k.es.new, disaggregated = FALSE)
```

```{r}
#| label: fig-roc-k-es-ays2325
#| fig-cap: "Receiver-operator Characteristic Curves For Spanish-to-Spanish Kindergarten Models (AYs 2023/24 and 2024/25 Combined)."
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.k.es.lnf,
  df.results.k.es.existing,
  df.results.k.es.model2,
  df.results.k.es.model3
  # df.results.k.es.srt,
  # df.results.k.es.new
), group = "All", output = "roc")
# plot.eo <- plot_roc_curves_across_models(list(df.results.k.es.lnf, df.results.k.es.existing, df.results.k.es.srt, df.results.k.es.new), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.k.es.lnf,
  df.results.k.es.existing,
  df.results.k.es.model2,
  df.results.k.es.model3
  # df.results.k.es.srt,
  # df.results.k.es.new
), group = "EL", output = "roc")

plots.roc.k <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                                         # plot.eo + labs(title = " "),
                                         plot.el + labs(title = " ")
),
nrow = 2,
labels = c("K - All Students", "K - English Learners")
)
plots.roc.k
```


\newpage\FloatBarrier
### Spanish-to-Spanish - Grade 1
\FloatBarrier

```{r model-1-es-wre-ays2325}

modelname <- "0. WRE only"
results.1.es.wre = build_prediction_model(df.2325.es,
                                          grd = "G1",
                                          lg = "Spanish",
                                          mdl = "wre_s"
)

df.results.1.es.wre <- results.1.es.wre[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.es.wre <- results.1.es.wre[[2]]

# create and save plots
plots.1.es.wre <- plot_roc_curves_within_model(df.results.1.es.wre, disaggregated = FALSE)
```

```{r model-1-es-existing-ays2325}

modelname <- "1. WRE, EVO, RANO, LSF"
results.1.es.existing = build_prediction_model(df.2325.es,
                                               grd = "G1",
                                               lg = "Spanish",
                                               mdl = "wre_s + evo_s + rano_s + lsf_s"
)

df.results.1.es.existing <- results.1.es.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.es.existing <- results.1.es.existing[[2]]

# create and save plots
plots.1.es.existing <- plot_roc_curves_within_model(df.results.1.es.existing, disaggregated = FALSE)
```


```{r model-1-es-model2-ays2325}

modelname <- "2. WRE, EVO, RANO, LSF"
results.1.es.model2 = build_prediction_model(df.2325.es,
                                             grd = "G1",
                                             lg = "Spanish",
                                             mdl = "wre_s + evo_s + rano_s + lsf_s"
)

df.results.1.es.model2 <- results.1.es.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.es.model2 <- results.1.es.model2[[2]]

# create and save plots
plots.1.es.model2 <- plot_roc_curves_within_model(df.results.1.es.model2, disaggregated = FALSE)
```

```{r model-1-es-model3-ays2325}

modelname <- "2. WRE, RANO, LSF"
results.1.es.model3 = build_prediction_model(df.2325.es,
                                             grd = "G1",
                                             lg = "Spanish",
                                             mdl = "wre_s + rano_s + lsf_s"
)

df.results.1.es.model3 <- results.1.es.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.es.model3 <- results.1.es.model3[[2]]

# create and save plots
plots.1.es.model3 <- plot_roc_curves_within_model(df.results.1.es.model3, disaggregated = FALSE)
```

```{r model-1-es-new-ays2325}

modelname <- "3. WRE, LSF, RANL"
results.1.es.new = build_prediction_model(df.2325.es,
                                          grd = "G1",
                                          lg = "Spanish",
                                          mdl = "wre_s + lsf_s + ranl_s"
)

df.results.1.es.new <- results.1.es.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.1.es.new <- results.1.es.new[[2]]

# create and save plots
plots.1.es.new <- plot_roc_curves_within_model(df.results.1.es.new, disaggregated = FALSE)
```


```{r}
#| label: fig-roc-1-es-ays2325
#| fig-cap: "Receiver-operator Characteristic Curves For Spanish-to-Spanish Grade 1 Models (AYs 2023/24 and 2024/25 Combined)."
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.1.es.wre,
  df.results.1.es.existing,
  # df.results.1.es.model2,
  df.results.1.es.model3
  # df.results.1.es.new
), group = "All", output = "roc")
# plot.eo <- plot_roc_curves_across_models(list(df.results.1.es.wre, df.results.1.es.existing, df.results.1.es.new), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.1.es.wre,
  df.results.1.es.existing,
  df.results.1.es.model2,
  df.results.1.es.model3
  # df.results.1.es.new
), group = "EL", output = "roc")

plots.roc.1 <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                                         # plot.eo + labs(title = " "),
                                         plot.el + labs(title = " ")
),
nrow = 2,
labels = c("G1 - All Students", "G1 - English Learners")
)
plots.roc.1
```

\newpage
\FloatBarrier
### Spanish-to-Spanish - Grade 2
\FloatBarrier

```{r model-2-es-wre-ays2325}

modelname <- "0. WRE only"
results.2.es.wre = build_prediction_model(df.2325.es,
                                          grd = "G2",
                                          lg = "Spanish",
                                          mdl = "wre_s"
)

df.results.2.es.wre <- results.2.es.wre[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.es.wre <- results.2.es.wre[[2]]

# create and save plots
plots.2.es.wre <- plot_roc_curves_within_model(df.results.2.es.wre, disaggregated = FALSE)
```

```{r model-2-es-existing-ays2325}

modelname <- "1. WRE, EVO, RANL"
results.2.es.existing = build_prediction_model(df.2325.es,
                                               grd = "G2",
                                               lg = "Spanish",
                                               mdl = "wre_s + evo_s + ranl_s"
)

df.results.2.es.existing <- results.2.es.existing[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.es.existing <- results.2.es.existing[[2]]

# create and save plots
plots.2.es.existing <- plot_roc_curves_within_model(df.results.2.es.existing, disaggregated = FALSE)
```

```{r model-2-es-model2-ays2325}

modelname <- "2. WRE, EVO, RANL, SPE"
results.2.es.model2 = build_prediction_model(df.2325.es,
                                             grd = "G2",
                                             lg = "Spanish",
                                             mdl = "wre_s + evo_s + ranl_s + spe_s"
)

df.results.2.es.model2 <- results.2.es.model2[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.es.model2 <- results.2.es.model2[[2]]

# create and save plots
plots.2.es.model2 <- plot_roc_curves_within_model(df.results.2.es.model2, disaggregated = FALSE)
```


```{r model-2-es-model3-ays2325}

modelname <- "2. WRE, RANL, SPE"
results.2.es.model3 = build_prediction_model(df.2325.es,
                                             grd = "G2",
                                             lg = "Spanish",
                                             mdl = "wre_s + ranl_s + spe_s"
)

df.results.2.es.model3 <- results.2.es.model3[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.es.model3 <- results.2.es.model3[[2]]

# create and save plots
plots.2.es.model3 <- plot_roc_curves_within_model(df.results.2.es.model3, disaggregated = FALSE)
```

```{r model-2-es-new-ays2325}

modelname <- "3. WRE, LSF, RANL"
results.2.es.new = build_prediction_model(df.2325.es,
                                          grd = "G2",
                                          lg = "Spanish",
                                          mdl = "wre_s + lsf_s + ranl_s"
)

df.results.2.es.new <- results.2.es.new[[1]] |> 
  # add relevant demographic variables
  left_join(df |>
              select(c(student_id,
                       el,
                       race,
                       ethnicity,
                       ever_disability
              )
              ) |>
              unique(),
            by = "student_id"
  ) |> 
  mutate(model = modelname)

model.2.es.new <- results.2.es.new[[2]]

# create and save plots
plots.2.es.new <- plot_roc_curves_within_model(df.results.2.es.new, disaggregated = FALSE)
```


```{r}
#| label: fig-roc-2-es-ays2325
#| fig-cap: "Receiver-operator Characteristic Curves For Spanish-to-Spanish Grade 2 Models (AYs 2023/24 and 2024/25 Combined)."
#| fig-height: 5.7
#| fig-width: 5

plot.all <- plot_roc_curves_across_models(list(
  df.results.2.es.wre,
  df.results.2.es.existing,
  df.results.2.es.model2,
  df.results.2.es.model3
  # df.results.2.es.new
), group = "All", output = "roc")
# plot.eo <- plot_roc_curves_across_models(list(df.results.2.es.wre, df.results.2.es.existing, df.results.2.es.new), group = "EO", output = "roc")
plot.el <- plot_roc_curves_across_models(list(
  df.results.2.es.wre,
  df.results.2.es.existing,
  df.results.2.es.model2,
  df.results.2.es.model3
  # df.results.2.es.new
), group = "EL", output = "roc")

plots.roc.2 <- ggarrange(plotlist = list(plot.all + labs(title = " "),
                                         # plot.eo + labs(title = " "),
                                         plot.el + labs(title = " ")
),
nrow = 2,
labels = c("G2 - All Students", "G2 - English Learners")
)
plots.roc.2
```


\blandscape

## Models Evaluations - Sensitivity and Specificity

```{r model-comparison-en-ays2325}
df.modelcomp <- df.2325.en

models <- list("K" = list("0. LNF only" = "lnf_e",
                          "1. LNF, RANO, ELIR, EVO" = "lnf_e + rano_e + elir_e + evo_e",
                          "2. LNF, RANO, EVO" = "lnf_e + rano_e + evo_e",
                          "3. LNF, RANO, ELIR" = "lnf_e + rano_e + elir_e"
),
"G1" = list("0. WRE only" = "wre_e",
            "1. WRE, RANO, LSF, EVO" = "wre_e + rano_e + lsf_e + evo_e",
            "2. WRE, RANO, LSF" = "wre_e + rano_e + lsf_e"
),
"G2" = list("0. WRE only" = "wre_e",
            "1. WRE, RANL, EVO" = "wre_e + ranl_e + evo_e",
            "2. WRE, RANL" = "wre_e + ranl_e"
)
)

lg = "English"

# roc.curves <- list()
# proc.curves <- list()
pred.dfs.en <- list()
# aucs <- list()

# Create a dataframe to hold evaluation metrics
dummy_cm <- confusionMatrix(factor(c(0,1,1,0)), factor(c(0,1,0,1)))
dummy_metrics <- extract_metrics(dummy_cm)
df.eval.en <- data.frame(matrix(ncol = ncol(dummy_metrics), nrow = 0))
colnames(df.eval.en) <- colnames(dummy_metrics)
df.eval.en <- data.frame(grade = as.character(), 
                         model = as.character(),
                         predictors = as.character(),
                         group = as.character(),
                         method = as.character(),
                         opt.cut.value = as.numeric()
) |> 
  cbind(df.eval.en)

groups = c("All", "EL", "EO")
lg ="English"

for (grade in names(models)) {
  for (model in names(models[[grade]])) {
    
    predictors <- gsub(" \\+ ", ", ", models[[grade]][[model]], fixed = FALSE)
    
    # build model
    results <- build_prediction_model(df.modelcomp,
                                      grd = grade,
                                      lg = lg,
                                      mdl = models[[grade]][[model]]
    )
    df.risk.pred <- results[[1]] |> 
      # add relevant demographic variables
      left_join(df |>
                  select(c(student_id,
                           el,
                           race,
                           ethnicity,
                           ever_disability
                  )
                  ) |>
                  unique(),
                by = "student_id"
      )
    
    #  "PROC01", "ObservedPrev","MeanPrev"
    for (method in c("Youden", "MaxSpSe", "SpEqualSe", "MaxEfficiency", "PrevalenceMatching")) {
      opt.cut <- optimal.cutpoints(X = "pred.prob",
                                   status = "risk",
                                   tag.healthy = 0,
                                   methods = method,
                                   data = as.data.frame(df.risk.pred),
                                   pop.prev = NULL, 
                                   ci.fit = TRUE,
                                   conf.level = 0.95,
                                   trace = FALSE
      )
      opt.cut.value <- get(method, opt.cut)$Global$optimal.cutoff$cutoff[1]
      
      df.temp.outer <- df.risk.pred |> 
        mutate(risk.pred = if_else(pred.prob <= opt.cut.value, 0, 1))
      
      
      for (group in groups) {
        
        if (group == "All") {
          cm = confusionMatrix(table(predicted = df.temp.outer$risk.pred,
                                     reference = df.temp.outer$risk),
                               positive = "1")
          
          df.out <- extract_metrics(cm) |> 
            mutate(grade = grade,
                   model = model,
                   predictors = predictors,
                   group = group,
                   method = method,
                   opt.cut = opt.cut.value
            )
          
          df.eval.en <- df.eval.en |> 
            rbind(df.out)
          
        } else if (group %in% c("EO", "EL")) {
          
          df.temp.inner <- df.temp.outer |> 
            filter(el == group)
          
          n.crit = df.temp.inner %>% nrow()
          if (n.crit < 5) next
          
          df.temp.inner$risk.pred <- factor(df.temp.inner$risk.pred, levels = c(0, 1))
          df.temp.inner$risk <- factor(df.temp.inner$risk, levels = c(0, 1))
          
          cm = confusionMatrix(table(predicted = df.temp.inner$risk.pred,
                                     reference = df.temp.inner$risk),
                               positive = "1")
          
          df.out <- extract_metrics(cm) |> 
            mutate(grade = grade,
                   model = model,
                   predictors = predictors,
                   group = group,
                   method = method,
                   opt.cut = opt.cut.value
            )
          
          df.eval.en <- df.eval.en |> 
            rbind(df.out)
        }
      }
      
      # save plots and prediction outputs for later use
      # out = plot_roc_curves_within_model(df.risk.pred)
      # roc.curves[[model]] <- out[[1]] + labs(title = model,
      #                                        subtitle = paste0("risk ~ ", models[[model]]))
      # proc.curves[[model]] <- out[[2]] + labs(title = model,
      #                                         subtitle = paste0("risk ~ ", models[[model]]))
      pred.dfs.en[[model]] <- df.risk.pred
      # aucs[[model]] <- mean(out[[1]]$data$AUROC)
    }
  }
}

# re-arrange columns
df.eval.en <- df.eval.en |> 
  select(c(grade, group, model, predictors, method, opt.cut), everything())

df.eval.en.wide.2325 <- df.eval.en |> 
  pivot_wider(names_from = group, values_from = Accuracy:Balanced.Accuracy) |> 
  select(c(grade, model, predictors, method, opt.cut,
           contains("_All"),
           contains("_EL"),
           contains("_EO")
           )
         )
```

```{r model-comparison-es-ays2325}
df.modelcomp <- df.2325.es

models <- list("K" = list("0. LNF only" = "lnf_s",
                          "1. LNF, RANO, ELIR, EVO" = "lnf_s + rano_s + elir_s + evo_s",
                          "2. LNF, RANO, EVO" = "lnf_s + rano_s + evo_s",
                          "3. LNF, RANO, ELIR" = "lnf_s + rano_s + elir_s"
),
"G1" = list("0. WRE only" = "wre_s",
            "1. WRE, RANO, LSF, EVO" = "wre_s + rano_s + lsf_s + evo_s",
            "2. WRE, RANO, LSF" = "wre_s + rano_s + lsf_s"
),
"G2" = list("0. WRE only" = "wre_s",
            "1. WRE, RANL, EVO" = "wre_s + ranl_s + evo_s",
            "2. WRE, RANL" = "wre_s + ranl_s"
)
)

lg = "Spanish"

# roc.curves <- list()
# proc.curves <- list()
pred.dfs.es <- list()
# aucs <- list()

# Create a dataframe to hold evaluation metrics
dummy_cm <- confusionMatrix(factor(c(0,1,1,0)), factor(c(0,1,0,1)))
dummy_metrics <- extract_metrics(dummy_cm)
df.eval.es <- data.frame(matrix(ncol = ncol(dummy_metrics), nrow = 0))
colnames(df.eval.es) <- colnames(dummy_metrics)
df.eval.es <- data.frame(grade = as.character(), 
                         model = as.character(),
                         predictors = as.character(),
                         group = as.character(),
                         method = as.character(),
                         opt.cut.value = as.numeric()
) |> 
  cbind(df.eval.es)

groups = c("All", "EL", "EO")
lg ="Spanish"

for (grade in names(models)) {
  for (model in names(models[[grade]])) {
    
    predictors <- gsub(" \\+ ", ", ", models[[grade]][[model]], fixed = FALSE)
    
    # build model
    results <- build_prediction_model(df.modelcomp,
                                      grd = grade,
                                      lg = lg,
                                      mdl = models[[grade]][[model]]
    )
    df.risk.pred <- results[[1]] |> 
      # add relevant demographic variables
      left_join(df |>
                  select(c(student_id,
                           el,
                           race,
                           ethnicity,
                           ever_disability
                  )
                  ) |>
                  unique(),
                by = "student_id"
      )
    
    #  "PROC01", "ObservedPrev","MeanPrev"
    for (method in c("Youden", "MaxSpSe", "SpEqualSe", "MaxEfficiency", "PrevalenceMatching")) {
      opt.cut <- optimal.cutpoints(X = "pred.prob",
                                   status = "risk",
                                   tag.healthy = 0,
                                   methods = method,
                                   data = as.data.frame(df.risk.pred),
                                   pop.prev = NULL, 
                                   ci.fit = TRUE,
                                   conf.level = 0.95,
                                   trace = FALSE
      )
      opt.cut.value <- get(method, opt.cut)$Global$optimal.cutoff$cutoff[1]
      
      df.temp.outer <- df.risk.pred |> 
        mutate(risk.pred = if_else(pred.prob <= opt.cut.value, 0, 1))
      
      for (group in groups) {
        
        if (group == "All") {
          cm = confusionMatrix(table(predicted = df.temp.outer$risk.pred,
                                     reference = df.temp.outer$risk),
                               positive = "1")
          
          df.out <- extract_metrics(cm) |> 
            mutate(grade = grade,
                   model = model,
                   predictors = predictors,
                   group = group,
                   method = method,
                   opt.cut = opt.cut.value
            )
          
          df.eval.es <- df.eval.es |> 
            rbind(df.out)
          
        } else if (group %in% c("EO", "EL")) {
          
          df.temp.inner <- df.temp.outer |> 
            filter(el == group)
          
          n.crit = df.temp.inner %>% nrow()
          if (n.crit < 10) next
          
          df.temp.inner$risk.pred <- factor(df.temp.inner$risk.pred, levels = c(0, 1))
          df.temp.inner$risk <- factor(df.temp.inner$risk, levels = c(0, 1))
          
          cm = confusionMatrix(table(predicted = df.temp.inner$risk.pred,
                                     reference = df.temp.inner$risk),
                               positive = "1")
          
          df.out <- extract_metrics(cm) |> 
            mutate(grade = grade,
                   model = model,
                   predictors = predictors,
                   group = group,
                   method = method,
                   opt.cut = opt.cut.value
            )
          
          df.eval.es <- df.eval.es |> 
            rbind(df.out)
        }
      }
      
      # save plots and prediction outputs for later use
      # out = plot_roc_curves_within_model(df.risk.pred)
      # roc.curves[[model]] <- out[[1]] + labs(title = model,
      #                                        subtitle = paste0("risk ~ ", models[[model]]))
      # proc.curves[[model]] <- out[[2]] + labs(title = model,
      #                                         subtitle = paste0("risk ~ ", models[[model]]))
      pred.dfs.es[[model]] <- df.risk.pred
      # aucs[[model]] <- mean(out[[1]]$data$AUROC)
    }
  }
}

# re-arrange columns
df.eval.es <- df.eval.es |> 
  select(c(grade, group, model, predictors, method, opt.cut), everything())

# deal with lacking data for EO and EL groups
df.eval.es <- df.eval.es %>% 
  rbind(df.eval.es %>% 
          mutate(group = "EL"
          ) %>% 
          mutate(across(-c(grade, group, model, predictors, method, opt.cut), ~ NA))
  ) %>% 
  rbind(df.eval.es %>% 
          mutate(group = "EO"
          ) %>% 
          mutate(across(-c(grade, group, model, predictors, method, opt.cut), ~ NA))
  )

df.eval.es.wide.2325 <- df.eval.es |> 
  filter(group == "All") %>% 
  pivot_wider(names_from = group, values_from = Accuracy:Balanced.Accuracy) |> 
  select(c(grade, model, predictors, method, opt.cut,
           contains("_All"),
           contains("_EL"),
           contains("_EO")
  )
  )
```

```{r eval=FALSE}
#| label: tbl-model-eval-summary-ays2325
#| tbl-cap: "Summary of Best English and Spanish Prediction Models (AYs 2023/24 and 2024/25 Combined).\\newline"

df.eval.en.wide.2325 |> 
  filter(method == "Youden") |> 
  mutate(grade = factor(grade, levels = c("K", "G1", "G2")),
         model = str_sub(model, 3, 100)
  ) |>
  arrange(grade, model) |> 
  unique() |> 
  select(c(grade,
           model,
           # method,
           contains("Sensitivity"),
           contains("Specificity")
           # contains("Balanced.Accuracy")
  )
  ) |> 
  # mutate(across(where(is.numeric), color_format)) |> 
  left_join(
    df.eval.es.wide.2325 |> 
      filter(method == "Youden") |> 
      mutate(grade = factor(grade, levels = c("K", "G1", "G2")),
             model = str_sub(model, 3, 100)
      ) |>
      arrange(grade, model) |> 
      unique() |> 
      select(c(grade,
               model,
               # method,
               Sensitivity_es = Sensitivity_All,
               Specificity_es = Specificity_All
               # contains("Balanced.Accuracy")
      )
      ) 
  ) |> 
  # mutate(across(where(is.numeric), color_format)) |> 
  kable(format = "latex",
        escape = FALSE,
        booktabs = TRUE,
        digits = 3,
        align = c("l", "l", "c", "c", "c", "c", "c", "c", "c", "c"),
        col.names = c("Grade",
                      "Model",
                      # "Method",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "All"
        ),
        linesep = c(rep("", 3), "\\addlinespace", rep("", 2), "\\addlinespace", rep("", 5))
  ) |> 
  kable_styling(
    full_width = FALSE,
    latex_options = c("scale_down")
  ) |> 
  add_header_above(c(" " = 2, "Sensitivity" = 3, "Specificity" = 3, "Sensitivity", "Specificity")) |> 
  add_header_above(c(" " = 2, "English" = 6, "Spanish" = 2))
```

```{r}
#| label: tbl-model-eval-summary-ays2425-new
#| tbl-cap: "Summary of Best English and Spanish Prediction Models  (AYs 2023/24 and 2024/25 Combined).\\newline"

df.eval.en.wide.2325 |> 
  filter(method == "Youden") |> 
  mutate(grade = factor(grade, levels = c("K", "G1", "G2")),
         model = str_sub(model, 3, 100)
  ) |>
  arrange(grade, model) |> 
  unique() |> 
  select(c(grade,
           model,
           # method,
           contains("Sensitivity"),
           contains("Specificity"),
           contains("Accuracy_"),
           contains("Balanced.Accuracy")
  )
  ) |> 
  # mutate(across(where(is.numeric), color_format)) |> 
  left_join(
    df.eval.es.wide.2325 |> 
      filter(method == "Youden") |> 
      mutate(grade = factor(grade, levels = c("K", "G1", "G2")),
             model = str_sub(model, 3, 100)
      ) |>
      arrange(grade, model) |> 
      unique() |> 
      select(c(grade,
               model,
               # method,
               Sensitivity_es = Sensitivity_All,
               Specificity_es = Specificity_All,
               Accuracy_es = Accuracy_All,
               Balanced.Accuracy_es = Balanced.Accuracy_All
      )
      ) 
  ) |> 
  mutate(across(where(is.numeric), color_format)) |>
  kable(format = "latex",
        escape = FALSE,
        booktabs = TRUE,
        digits = 3,
        align = c("l", "l", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c"),
        col.names = c("Grade",
                      "Model",
                      # "Method",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "All",
                      "All",
                      "All"
        ),
        linesep = c(rep("", 3), "\\addlinespace", rep("", 2), "\\addlinespace", rep("", 5))
  ) |> 
  kable_styling(
    full_width = FALSE,
    latex_options = c("scale_down")
  ) |> 
  add_header_above(c(" " = 2, "Sensitivity" = 3, "Specificity" = 3, "Accuracy" = 3, "Balanced Acc." = 3, "Sens.", "Spec.", "Acc.", "BA")) |> 
  add_header_above(c(" " = 2, "English" = 12, "Spanish" = 4)) %>% 
  add_footnote(label = "Note. green: >= .8; black: >= .7; yellow: >= .6; red otherwise", notation = "none")
```

\FloatBarrier
\newpage

# Part IV - Evaluating 23/24 Model With 24/25 Data
\FloatBarrier

```{r model-re-evaluation-en}

pred.dfs.en <- list()

# Create a dataframe to hold evaluation metrics
dummy_cm <- confusionMatrix(factor(c(0,1,1,0)), factor(c(0,1,0,1)))
dummy_metrics <- extract_metrics(dummy_cm)
df.eval.en <- data.frame(matrix(ncol = ncol(dummy_metrics), nrow = 0))
colnames(df.eval.en) <- colnames(dummy_metrics)
df.eval.en <- data.frame(grade = as.character(), 
                         model = as.character(),
                         predictors = as.character(),
                         group = as.character(),
                         method = as.character(),
                         opt.cut.value = as.numeric()
) |> 
  cbind(df.eval.en)

groups = c("All", "EL", "EO")
lg ="English"

for (g in c("K", "G1", "G2")) {

  predictors <- case_when(g == "K" ~ "LNF, EVO, ELIR, RANO",
                          g == "G1" ~ "WRE, EVO, LSF, RANO",
                          g == "G2" ~ "WRE, EVO, RANL",
  )
  model <- case_when(g == "K" ~ "1. LNF, EVO, ELIR, RANO",
                     g == "G1" ~ "1. WRE, EVO, LSF, RANO",
                     g == "G2" ~ "1. WRE, EVO, RANL",
  )
  
    # build model
  df.risk.pred <- df.2324.en %>%
    filter(grade == g) %>% 
    select(c(student_id, task, score, risk)) %>% 
    pivot_wider(names_from = task, values_from = score)
  
  if (g == "K") {
    df.risk.pred <- df.risk.pred %>% 
      mutate(pred.logit = -0.7857606 - 0.2281844 * evo_e + 0.7882713 * rano_e - 0.0856504 * lnf_e - 0.0645247 * elir_e,
             pred.prob = plogis(pred.logit)
      )
  } else if (g == "G1") {
    df.risk.pred <- df.risk.pred %>% 
      mutate(pred.logit = -1.0353279 - 0.1642495 * evo_e - 0.5918354 * wre_e - 0.0260127 * lsf_e - 0.7431929 * rano_e,,
             pred.prob = plogis(pred.logit)
      )
  } else if (g == "G2") {
    df.risk.pred <- df.risk.pred %>% 
      mutate(pred.logit = 1.0756197 - 0.2188058 * evo_e - 1.0683497 * wre_e - 2.1755685 * ranl_e,
             pred.prob = plogis(pred.logit)
      )
  }
  
  df.risk.pred <- df.risk.pred %>% 
    select(-contains("_e")) %>% 
    # add relevant demographic variables
      left_join(df.2324.en |>
                  select(c(student_id,
                           el,
                           race,
                           ethnicity,
                           ever_disability
                  )
                  ) |>
                  unique(),
                by = "student_id"
      )
    
    #  "PROC01", "ObservedPrev","MeanPrev"
    for (method in c("Youden", "MaxSpSe", "SpEqualSe", "MaxEfficiency", "PrevalenceMatching")) {
      opt.cut <- optimal.cutpoints(X = "pred.prob",
                                   status = "risk",
                                   tag.healthy = 0,
                                   methods = method,
                                   data = as.data.frame(df.risk.pred),
                                   pop.prev = NULL, 
                                   ci.fit = TRUE,
                                   conf.level = 0.95,
                                   trace = FALSE
      )
      opt.cut.value <- get(method, opt.cut)$Global$optimal.cutoff$cutoff[1]
      
      df.temp.outer <- df.risk.pred |> 
        mutate(risk.pred = if_else(pred.prob <= opt.cut.value, 0, 1))
      
      for (group in groups) {
        
        if (group == "All") {
          cm = confusionMatrix(table(predicted = df.temp.outer$risk.pred,
                                     reference = df.temp.outer$risk),
                               positive = "1")
          
          df.out <- extract_metrics(cm) |> 
            mutate(grade = g,
                   model = model,
                   predictors = predictors,
                   group = group,
                   method = method,
                   opt.cut = opt.cut.value
            )
          
          df.eval.en <- df.eval.en |> 
            rbind(df.out)
          
        } else if (group %in% c("EO", "EL")) {
          
          df.temp.inner <- df.temp.outer |> 
            filter(el == group)
          
          n.crit = df.temp.inner %>% nrow()
          if (n.crit < 5) next
          
          df.temp.inner$risk.pred <- factor(df.temp.inner$risk.pred, levels = c(0, 1))
          df.temp.inner$risk <- factor(df.temp.inner$risk, levels = c(0, 1))
          
          cm = confusionMatrix(table(predicted = df.temp.inner$risk.pred,
                                     reference = df.temp.inner$risk),
                               positive = "1")
          
          df.out <- extract_metrics(cm) |> 
            mutate(grade = g,
                   model = model,
                   predictors = predictors,
                   group = group,
                   method = method,
                   opt.cut = opt.cut.value
            )
          
          df.eval.en <- df.eval.en |> 
            rbind(df.out)
        }
      }
      # pred.dfs.en[[model]] <- df.risk.pred
    }
}

# re-arrange columns
df.eval.en <- df.eval.en |> 
  select(c(grade, group, model, predictors, method, opt.cut), everything())

df.eval.en.wide.reeval <- df.eval.en |> 
  pivot_wider(names_from = group, values_from = Accuracy:Balanced.Accuracy) |> 
  select(c(grade, model, predictors, method, opt.cut,
           contains("_All"),
           contains("_EL"),
           contains("_EO")
           )
         )
```

```{r model-re-evaluation-es}
# roc.curves <- list()
# proc.curves <- list()
pred.dfs.es <- list()
# aucs <- list()

# Create a dataframe to hold evaluation metrics
dummy_cm <- confusionMatrix(factor(c(0,1,1,0)), factor(c(0,1,0,1)))
dummy_metrics <- extract_metrics(dummy_cm)
df.eval.es <- data.frame(matrix(ncol = ncol(dummy_metrics), nrow = 0))
colnames(df.eval.es) <- colnames(dummy_metrics)
df.eval.es <- data.frame(grade = as.character(), 
                         model = as.character(),
                         predictors = as.character(),
                         group = as.character(),
                         method = as.character(),
                         opt.cut.value = as.numeric()
) |> 
  cbind(df.eval.es)

groups = c("All", "EL", "EO")
lg ="English"

for (g in c("K", "G1", "G2")) {
  
  predictors <- case_when(g == "K" ~ "LNF, EVO, ELIR, RANO",
                          g == "G1" ~ "WRE, EVO, LSF, RANO",
                          g == "G2" ~ "WRE, EVO, RANL",
  )
  model <- case_when(g == "K" ~ "1. LNF, EVO, ELIR, RANO",
                     g == "G1" ~ "1. WRE, EVO, LSF, RANO",
                     g == "G2" ~ "1. WRE, EVO, RANL",
  )
  
  # build model
  df.risk.pred <- df.2324.es %>%
    filter(grade == g) %>% 
    select(c(student_id, task, score, risk)) %>% 
    pivot_wider(names_from = task, values_from = score)
  
  if (g == "K") {
    df.risk.pred <- df.risk.pred %>% 
      mutate(pred.logit = -0.7922788 - 0.3789102 * evo_s - 0.2739921 * rano_s - 0.0832631 * lnf_s + 0.0250707 * elir_s,
             pred.prob = plogis(pred.logit)
      )
  } else if (g == "G1") {
    df.risk.pred <- df.risk.pred %>% 
      mutate(pred.logit = 2.8311376 + 0.0871953 * evo_s - 0.2696457 * wre_s - 0.0945730 * lsf_s - 2.4299005 * rano_s,,
             pred.prob = plogis(pred.logit)
      )
  } else if (g == "G2") {
    df.risk.pred <- df.risk.pred %>% 
      mutate(pred.logit = 1.4630806 + 0.0416700 * evo_s - 0.8417317 * wre_s - 2.4574223 * ranl_s,
             pred.prob = plogis(pred.logit)
      )
  }
  
  df.risk.pred <- df.risk.pred %>% 
    select(-contains("_s")) %>% 
    # add relevant demographic variables
    left_join(df.2324.es |>
                select(c(student_id,
                         el,
                         race,
                         ethnicity,
                         ever_disability
                )
                ) |>
                unique(),
              by = "student_id"
    )
  
  #  "PROC01", "ObservedPrev","MeanPrev"
  for (method in c("Youden", "MaxSpSe", "SpEqualSe", "MaxEfficiency", "PrevalenceMatching")) {
    opt.cut <- optimal.cutpoints(X = "pred.prob",
                                 status = "risk",
                                 tag.healthy = 0,
                                 methods = method,
                                 data = as.data.frame(df.risk.pred),
                                 pop.prev = NULL, 
                                 ci.fit = TRUE,
                                 conf.level = 0.95,
                                 trace = FALSE
    )
    opt.cut.value <- get(method, opt.cut)$Global$optimal.cutoff$cutoff[1]
    
    df.temp.outer <- df.risk.pred |> 
      mutate(risk.pred = if_else(pred.prob <= opt.cut.value, 0, 1))
    
    
    for (group in groups) {
      
      if (group == "All") {
        cm = confusionMatrix(table(predicted = df.temp.outer$risk.pred,
                                   reference = df.temp.outer$risk),
                             positive = "1")
        
        df.out <- extract_metrics(cm) |> 
          mutate(grade = g,
                 model = model,
                 predictors = predictors,
                 group = group,
                 method = method,
                 opt.cut = opt.cut.value
          )
        
        df.eval.es <- df.eval.es |> 
          rbind(df.out)
        
      } else if (group %in% c("EO", "EL")) {
        
        df.temp.inner <- df.temp.outer |> 
          filter(el == group)
        
        n.crit = df.temp.inner %>% nrow()
        if (n.crit < 5) next
        
        df.temp.inner$risk.pred <- factor(df.temp.inner$risk.pred, levels = c(0, 1))
        df.temp.inner$risk <- factor(df.temp.inner$risk, levels = c(0, 1))
        
        cm = confusionMatrix(table(predicted = df.temp.inner$risk.pred,
                                   reference = df.temp.inner$risk),
                             positive = "1")
        
        df.out <- extract_metrics(cm) |> 
          mutate(grade = g,
                 model = model,
                 predictors = predictors,
                 group = group,
                 method = method,
                 opt.cut = opt.cut.value
          )
        
        df.eval.es <- df.eval.es |> 
          rbind(df.out)
      }
    }
    # pred.dfs.es[[model]] <- df.risk.pred
  }
}

# re-arrange columns
df.eval.es <- df.eval.es |> 
  select(c(grade, group, model, predictors, method, opt.cut), everything())

df.eval.es.wide.reeval <- df.eval.es |> 
  pivot_wider(names_from = group, values_from = Accuracy:Balanced.Accuracy) |> 
  select(c(grade, model, predictors, method, opt.cut,
           contains("_All"),
           contains("_EL"),
           contains("_EO")
  )
  )
```


```{r}
#| label: tbl-model-reeval-new
#| tbl-cap: "Re-evaluation of 2023/24 Prediction Model Using 2024/25 Data.\\newline"

df.eval.en.wide.reeval |> 
  filter(method == "Youden") |> 
  mutate(grade = factor(grade, levels = c("K", "G1", "G2")),
         model = str_sub(model, 3, 100)
  ) |>
  arrange(grade, model) |> 
  unique() |> 
  select(c(grade,
           model,
           # method,
           contains("Sensitivity"),
           contains("Specificity"),
           contains("Accuracy_"),
           contains("Balanced.Accuracy")
  )
  ) |> 
  # mutate(across(where(is.numeric), color_format)) |> 
  left_join(
    df.eval.es.wide.reeval |> 
      filter(method == "Youden") |> 
      mutate(grade = factor(grade, levels = c("K", "G1", "G2")),
             model = str_sub(model, 3, 100)
      ) |>
      arrange(grade, model) |> 
      unique() |> 
      select(c(grade,
               model,
               # method,
               Sensitivity_es = Sensitivity_All,
               Specificity_es = Specificity_All,
               Accuracy_es = Accuracy_All,
               Balanced.Accuracy_es = Balanced.Accuracy_All
      )
      ) 
  ) |> 
  mutate(across(where(is.numeric), color_format)) |>
  kable(format = "latex",
        escape = FALSE,
        booktabs = TRUE,
        digits = 3,
        align = c("l", "l", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c"),
        col.names = c("Grade",
                      "Model",
                      # "Method",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "EL",
                      "EO",
                      "All",
                      "All",
                      "All",
                      "All"
        ),
        linesep = c(rep("", 3), "\\addlinespace", rep("", 2), "\\addlinespace", rep("", 5))
  ) |> 
  kable_styling(
    full_width = FALSE,
    latex_options = c("scale_down")
  ) |> 
  add_header_above(c(" " = 2, "Sensitivity" = 3, "Specificity" = 3, "Accuracy" = 3, "Balanced Acc." = 3, "Sens.", "Spec.", "Acc.", "BA")) |> 
  add_header_above(c(" " = 2, "English" = 12, "Spanish" = 4)) %>% 
  add_footnote(label = "Note. green: >= .8; black: >= .7; yellow: >= .6; red otherwise", notation = "none")
```

\elandscape

